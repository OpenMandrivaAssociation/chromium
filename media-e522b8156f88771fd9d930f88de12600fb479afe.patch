commit e522b8156f88771fd9d930f88de12600fb479afe
Author: Ted Meyer <tmathmeyer@chromium.org>
Date:   Wed Apr 3 20:15:11 2024 +0000

    Roll FFmpeg dep
    
    Some changes in the size of packets for wav file demuxing
    have required adjustments to numbers and hashes, as well as to
    some of the way we used constants in a few unit tests.
    
    Bug: 330573128
    Change-Id: I2cf0a2d04fe23b8229e0ae4961ca71b98fb91de7
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5389551
    Reviewed-by: Eugene Zemtsov <eugene@chromium.org>
    Commit-Queue: Ted (Chromium) Meyer <tmathmeyer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1282076}
    NOKEYCHECK=True
    GitOrigin-RevId: 05aa7309b40058ac09d56753df391f629f609eec

diff --git a/ffmpeg/ffmpeg_common.cc b/ffmpeg/ffmpeg_common.cc
index 3331581a6..69539fd65 100644
--- a/ffmpeg/ffmpeg_common.cc
+++ b/ffmpeg/ffmpeg_common.cc
@@ -404,7 +404,9 @@ bool AVCodecContextToAudioDecoderConfig(const AVCodecContext* codec_context,
 
     // TODO(dalecurtis): Just use the profile from the codec context if ffmpeg
     // ever starts supporting xHE-AAC.
-    if (codec_context->profile == FF_PROFILE_UNKNOWN) {
+    constexpr uint8_t kXHEAAc = 41;
+    if (codec_context->profile == FF_PROFILE_UNKNOWN ||
+        codec_context->profile == kXHEAAc) {
       // Errors aren't fatal here, so just drop any MediaLog messages.
       NullMediaLog media_log;
       mp4::AAC aac_parser;
diff --git a/ffmpeg/ffmpeg_regression_tests.cc b/ffmpeg/ffmpeg_regression_tests.cc
index 05dcb1cd6..866f44669 100644
--- a/ffmpeg/ffmpeg_regression_tests.cc
+++ b/ffmpeg/ffmpeg_regression_tests.cc
@@ -90,16 +90,16 @@ FFMPEG_TEST_CASE(Cr62127,
                  PIPELINE_ERROR_DECODE,
                  PIPELINE_ERROR_DECODE);
 FFMPEG_TEST_CASE(Cr93620, "security/93620.ogg", PIPELINE_OK, PIPELINE_OK);
-FFMPEG_TEST_CASE(Cr100492,
-                 "security/100492.webm",
-                 DECODER_ERROR_NOT_SUPPORTED,
-                 DECODER_ERROR_NOT_SUPPORTED);
+FFMPEG_TEST_CASE(Cr100492, "security/100492.webm", PIPELINE_OK, PIPELINE_OK);
 FFMPEG_TEST_CASE(Cr100543, "security/100543.webm", PIPELINE_OK, PIPELINE_OK);
 FFMPEG_TEST_CASE(Cr101458,
                  "security/101458.webm",
                  PIPELINE_ERROR_DECODE,
                  PIPELINE_ERROR_DECODE);
-FFMPEG_TEST_CASE(Cr108416, "security/108416.webm", PIPELINE_OK, PIPELINE_OK);
+FFMPEG_TEST_CASE(Cr108416,
+                 "security/108416.webm",
+                 PIPELINE_ERROR_DECODE,
+                 PIPELINE_ERROR_DECODE);
 FFMPEG_TEST_CASE(Cr110849,
                  "security/110849.mkv",
                  DEMUXER_ERROR_COULD_NOT_OPEN,
@@ -154,7 +154,10 @@ FFMPEG_TEST_CASE(Cr234630b,
                  "security/234630b.mov",
                  DEMUXER_ERROR_NO_SUPPORTED_STREAMS,
                  DEMUXER_ERROR_NO_SUPPORTED_STREAMS);
-FFMPEG_TEST_CASE(Cr242786, "security/242786.webm", PIPELINE_OK, PIPELINE_OK);
+FFMPEG_TEST_CASE(Cr242786,
+                 "security/242786.webm",
+                 PIPELINE_OK,
+                 PIPELINE_ERROR_DECODE);
 // Test for out-of-bounds access with slightly corrupt file (detection logic
 // thinks it's a MONO file, but actually contains STEREO audio).
 FFMPEG_TEST_CASE(Cr275590,
@@ -372,8 +375,8 @@ FFMPEG_TEST_CASE(WEBM_2,
                  DEMUXER_ERROR_NO_SUPPORTED_STREAMS);
 FFMPEG_TEST_CASE(WEBM_4,
                  "security/out.webm.68798.1929",
-                 DECODER_ERROR_NOT_SUPPORTED,
-                 DECODER_ERROR_NOT_SUPPORTED);
+                 PIPELINE_OK,
+                 PIPELINE_OK);
 FFMPEG_TEST_CASE(WEBM_5, "frame_size_change.webm", PIPELINE_OK, PIPELINE_OK);
 
 // General MKV test cases.
diff --git a/filters/audio_decoder_unittest.cc b/filters/audio_decoder_unittest.cc
index a31823cfe..e43f408b7 100644
--- a/filters/audio_decoder_unittest.cc
+++ b/filters/audio_decoder_unittest.cc
@@ -484,7 +484,7 @@ constexpr TestParams kXheAacTestParams[] = {
      }},
      0,
      29400,
-     CHANNEL_LAYOUT_MONO,
+     CHANNEL_LAYOUT_UNSUPPORTED,
      AudioCodecProfile::kXHE_AAC},
 #endif
     {AudioCodec::kAAC,
diff --git a/filters/audio_file_reader_unittest.cc b/filters/audio_file_reader_unittest.cc
index c0cc568d6..edf9470f2 100644
--- a/filters/audio_file_reader_unittest.cc
+++ b/filters/audio_file_reader_unittest.cc
@@ -62,15 +62,14 @@ class AudioFileReaderTest : public testing::Test {
   // Verify packets are consistent across demuxer runs.  Reads the first few
   // packets and then seeks back to the start timestamp and verifies that the
   // hashes match on the packets just read.
-  void VerifyPackets() {
-    const int kReads = 3;
+  void VerifyPackets(int packet_reads) {
     const int kTestPasses = 2;
 
     AVPacket packet;
     base::TimeDelta start_timestamp;
     std::vector<std::string> packet_md5_hashes_;
     for (int i = 0; i < kTestPasses; ++i) {
-      for (int j = 0; j < kReads; ++j) {
+      for (int j = 0; j < packet_reads; ++j) {
         ASSERT_TRUE(reader_->ReadPacketForTesting(&packet));
 
         // On the first pass save the MD5 hash of each packet, on subsequent
@@ -99,7 +98,8 @@ class AudioFileReaderTest : public testing::Test {
                int sample_rate,
                base::TimeDelta duration,
                int frames,
-               int expected_frames) {
+               int expected_frames,
+               int packet_reads = 3) {
     Initialize(fn);
     ASSERT_TRUE(reader_->Open());
     EXPECT_EQ(channels, reader_->channels());
@@ -113,7 +113,7 @@ class AudioFileReaderTest : public testing::Test {
       EXPECT_EQ(reader_->HasKnownDuration(), false);
     }
     if (!packet_verification_disabled_)
-      ASSERT_NO_FATAL_FAILURE(VerifyPackets());
+      ASSERT_NO_FATAL_FAILURE(VerifyPackets(packet_reads));
     ReadAndVerify(hash, expected_frames);
   }
 
@@ -220,7 +220,7 @@ TEST_F(AudioFileReaderTest, AAC_ADTS) {
 }
 
 TEST_F(AudioFileReaderTest, MidStreamConfigChangesFail) {
-  RunTestFailingDecode("midstream_config_change.mp3", 42624);
+  RunTestFailingDecode("midstream_config_change.mp3", 0);
 }
 #endif
 
@@ -230,7 +230,7 @@ TEST_F(AudioFileReaderTest, VorbisInvalidChannelLayout) {
 
 TEST_F(AudioFileReaderTest, WaveValidFourChannelLayout) {
   RunTest("4ch.wav", "131.71,38.02,130.31,44.89,135.98,42.52,", 4, 44100,
-          base::Microseconds(100001), 4411, 4410);
+          base::Microseconds(100001), 4411, 4410, /*packet_reads=*/2);
 }
 
 TEST_F(AudioFileReaderTest, ReadPartialMP3) {
diff --git a/filters/ffmpeg_video_decoder.cc b/filters/ffmpeg_video_decoder.cc
index 8a658a58c..9d6ed8aeb 100644
--- a/filters/ffmpeg_video_decoder.cc
+++ b/filters/ffmpeg_video_decoder.cc
@@ -213,10 +213,6 @@ int FFmpegVideoDecoder::GetVideoBuffer(struct AVCodecContext* codec_context,
     frame->linesize[plane] = layout->planes()[plane].stride;
   }
 
-  // This seems unsafe, given threaded decoding.  However, `reordered_opaque` is
-  // also going away upstream, so we need a whole new mechanism either way.
-  frame->reordered_opaque = codec_context->reordered_opaque;
-
   // This will be freed by `ReleaseVideoBufferImpl`.
   auto* opaque = new OpaqueData(fb_priv, frame_pool_, data, allocation_size,
                                 std::move(*layout));
diff --git a/test/pipeline_integration_test.cc b/test/pipeline_integration_test.cc
index beeafbc1a..ea4c871f5 100644
--- a/test/pipeline_integration_test.cc
+++ b/test/pipeline_integration_test.cc
@@ -2326,9 +2326,7 @@ TEST_F(PipelineIntegrationTest, StereoAACMarkedAsMono) {
 
 // Verify files which change configuration midstream fail gracefully.
 TEST_F(PipelineIntegrationTest, MidStreamConfigChangesFail) {
-  ASSERT_EQ(PIPELINE_OK, Start("midstream_config_change.mp3"));
-  Play();
-  ASSERT_EQ(WaitUntilEndedOrError(), PIPELINE_ERROR_DECODE);
+  ASSERT_EQ(PIPELINE_ERROR_DECODE, Start("midstream_config_change.mp3"));
 }
 
 TEST_F(PipelineIntegrationTest, BasicPlayback_16x9AspectRatio) {

diff -up chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_extractor.cc.21~ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_extractor.cc
--- chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_extractor.cc.21~	2023-11-01 19:11:24.990743600 +0100
+++ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_extractor.cc	2023-11-02 01:05:07.300998605 +0100
@@ -28,8 +28,8 @@ limitations under the License.
 #include "tensorflow_lite_support/cc/port/status_macros.h"
 #include "tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.h"
 #include "tensorflow_lite_support/metadata/metadata_schema_generated.h"
-#include "third_party/zlib/contrib/minizip/ioapi.h"
-#include "third_party/zlib/contrib/minizip/unzip.h"
+#include <minizip/ioapi.h>
+#include <minizip/unzip.h>
 
 
 namespace tflite {
@@ -81,7 +81,7 @@ tflite::support::StatusOr<ZipFileInfo> G
   int method;
   TFLITE_RETURN_IF_ERROR(UnzipErrorToStatus(
       unzOpenCurrentFile2(zf, &method, /*level=*/nullptr, /*raw=*/1)));
-  if (method != Z_NO_COMPRESSION) {
+  if (method != 0 /*Z_NO_COMPRESSION*/) {
     return CreateStatusWithPayload(
         StatusCode::kUnknown, "Expected uncompressed zip archive.",
         TfLiteSupportStatus::kMetadataAssociatedFileZipError);
@@ -105,7 +105,9 @@ tflite::support::StatusOr<ZipFileInfo> G
   free(c_file_name);
 
   // Get position in file.
-  auto position = unzGetCurrentFileZStreamPos64(zf);
+  unz64_file_pos pos;
+  unzGetFilePos64(zf, &pos);
+  auto position = pos.pos_in_zip_directory; //unzGetCurrentFileZStreamPos64(zf);
   if (position == 0) {
     return CreateStatusWithPayload(
         StatusCode::kUnknown, "Unable to read file in zip archive.",
diff -up chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.cc.21~ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.cc
--- chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.cc.21~	2023-11-01 19:11:24.990743600 +0100
+++ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.cc	2023-11-02 01:05:41.226380975 +0100
@@ -19,7 +19,7 @@ limitations under the License.
 #include <cstdio>
 
 #include "absl/strings/string_view.h"  // from @com_google_absl
-#include "third_party/zlib/contrib/minizip/ioapi.h"
+#include <minizip/ioapi.h>
 
 namespace tflite {
 namespace metadata {
@@ -41,15 +41,15 @@ zlib_filefunc64_def& ZipReadOnlyMemFile:
 }
 
 /* static */
-voidpf ZipReadOnlyMemFile::OpenFile(voidpf opaque, const void* filename,
+void* ZipReadOnlyMemFile::OpenFile(void* opaque, const void* filename,
                                     int mode) {
   // Result is never used, but needs to be non-null for `zipOpen2` not to fail.
   return opaque;
 }
 
 /* static */
-uLong ZipReadOnlyMemFile::ReadFile(voidpf opaque, voidpf stream, void* buf,
-                                   uLong size) {
+unsigned long ZipReadOnlyMemFile::ReadFile(void* opaque, void* stream, void* buf,
+                                   unsigned long size) {
   auto* mem_file = static_cast<ZipReadOnlyMemFile*>(opaque);
   if (mem_file->offset_ < 0 || mem_file->Size() < mem_file->offset_) {
     return 0;
@@ -65,20 +65,20 @@ uLong ZipReadOnlyMemFile::ReadFile(voidp
 }
 
 /* static */
-uLong ZipReadOnlyMemFile::WriteFile(voidpf opaque, voidpf stream,
-                                    const void* buf, uLong size) {
+unsigned long ZipReadOnlyMemFile::WriteFile(void* opaque, void* stream,
+                                    const void* buf, unsigned long size) {
   // File is not writable.
   return 0;
 }
 
 /* static */
-ZPOS64_T ZipReadOnlyMemFile::TellFile(voidpf opaque, voidpf stream) {
+ZPOS64_T ZipReadOnlyMemFile::TellFile(void* opaque, void* stream) {
   return static_cast<ZipReadOnlyMemFile*>(opaque)->offset_;
 }
 
 /* static */
 long ZipReadOnlyMemFile::SeekFile  // NOLINT
-    (voidpf opaque, voidpf stream, ZPOS64_T offset, int origin) {
+    (void* opaque, void* stream, ZPOS64_T offset, int origin) {
   auto* mem_file = static_cast<ZipReadOnlyMemFile*>(opaque);
   switch (origin) {
     case SEEK_SET:
@@ -104,13 +104,13 @@ long ZipReadOnlyMemFile::SeekFile  // NO
 }
 
 /* static */
-int ZipReadOnlyMemFile::CloseFile(voidpf opaque, voidpf stream) {
+int ZipReadOnlyMemFile::CloseFile(void* opaque, void* stream) {
   // Nothing to do.
   return 0;
 }
 
 /* static */
-int ZipReadOnlyMemFile::ErrorFile(voidpf opaque, voidpf stream) {
+int ZipReadOnlyMemFile::ErrorFile(void* opaque, void* stream) {
   // Unused.
   return 0;
 }
diff -up chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.h.21~ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.h
--- chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.h.21~	2023-11-01 19:11:24.990743600 +0100
+++ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_readonly_mem_file.h	2023-11-02 01:06:05.712656885 +0100
@@ -19,7 +19,7 @@ limitations under the License.
 #include <cstdlib>
 
 #include "absl/strings/string_view.h"  // from @com_google_absl
-#include "third_party/zlib/contrib/minizip/ioapi.h"
+#include <minizip/ioapi.h>
 
 namespace tflite {
 namespace metadata {
@@ -56,15 +56,15 @@ class ZipReadOnlyMemFile {
   size_t Size() const { return data_.size(); }
 
   // The file function implementations used in the `zlib_filefunc64_def`.
-  static voidpf OpenFile(voidpf opaque, const void* filename, int mode);
-  static uLong ReadFile(voidpf opaque, voidpf stream, void* buf, uLong size);
-  static uLong WriteFile(voidpf opaque, voidpf stream, const void* buf,
-                         uLong size);
-  static ZPOS64_T TellFile(voidpf opaque, voidpf stream);
+  static void* OpenFile(void* opaque, const void* filename, int mode);
+  static unsigned long ReadFile(void* opaque, void* stream, void* buf, unsigned long size);
+  static unsigned long WriteFile(void* opaque, void* stream, const void* buf,
+                         unsigned long size);
+  static ZPOS64_T TellFile(void* opaque, void* stream);
   static long SeekFile  // NOLINT
-      (voidpf opaque, voidpf stream, ZPOS64_T offset, int origin);
-  static int CloseFile(voidpf opaque, voidpf stream);
-  static int ErrorFile(voidpf opaque, voidpf stream);
+      (void* opaque, void* stream, ZPOS64_T offset, int origin);
+  static int CloseFile(void* opaque, void* stream);
+  static int ErrorFile(void* opaque, void* stream);
 };
 
 }  // namespace metadata
diff -up chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.cc.21~ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.cc
--- chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.cc.21~	2023-11-01 19:11:24.990743600 +0100
+++ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.cc	2023-11-02 01:06:20.407822441 +0100
@@ -19,7 +19,7 @@ limitations under the License.
 #include <cstdio>
 
 #include "absl/strings/string_view.h"  // from @com_google_absl
-#include "third_party/zlib/contrib/minizip/ioapi.h"
+#include <minizip/ioapi.h>
 
 namespace tflite {
 namespace metadata {
@@ -43,15 +43,15 @@ zlib_filefunc64_def& ZipWritableMemFile:
 absl::string_view ZipWritableMemFile::GetFileContent() const { return data_; }
 
 /* static */
-voidpf ZipWritableMemFile::OpenFile(voidpf opaque, const void* filename,
+void* ZipWritableMemFile::OpenFile(void* opaque, const void* filename,
                                     int mode) {
   // Result is never used, but needs to be non-null for `zipOpen2` not to fail.
   return opaque;
 }
 
 /* static */
-uLong ZipWritableMemFile::ReadFile(voidpf opaque, voidpf stream, void* buf,
-                                   uLong size) {
+unsigned long ZipWritableMemFile::ReadFile(void* opaque, void* stream, void* buf,
+                                   unsigned long size) {
   auto* mem_file = static_cast<ZipWritableMemFile*>(opaque);
   if (mem_file->offset_ < 0 || mem_file->Size() < mem_file->offset_) {
     return 0;
@@ -67,8 +67,8 @@ uLong ZipWritableMemFile::ReadFile(voidp
 }
 
 /* static */
-uLong ZipWritableMemFile::WriteFile(voidpf opaque, voidpf stream,
-                                    const void* buf, uLong size) {
+unsigned long ZipWritableMemFile::WriteFile(void* opaque, void* stream,
+                                    const void* buf, unsigned long size) {
   auto* mem_file = static_cast<ZipWritableMemFile*>(opaque);
   if (mem_file->offset_ + size > mem_file->Size()) {
     mem_file->data_.resize(mem_file->offset_ + size);
@@ -80,13 +80,13 @@ uLong ZipWritableMemFile::WriteFile(void
 }
 
 /* static */
-ZPOS64_T ZipWritableMemFile::TellFile(voidpf opaque, voidpf stream) {
+ZPOS64_T ZipWritableMemFile::TellFile(void* opaque, void* stream) {
   return static_cast<ZipWritableMemFile*>(opaque)->offset_;
 }
 
 /* static */
 long ZipWritableMemFile::SeekFile  // NOLINT
-    (voidpf opaque, voidpf stream, ZPOS64_T offset, int origin) {
+    (void* opaque, void* stream, ZPOS64_T offset, int origin) {
   auto* mem_file = static_cast<ZipWritableMemFile*>(opaque);
   switch (origin) {
     case SEEK_SET:
@@ -112,13 +112,13 @@ long ZipWritableMemFile::SeekFile  // NO
 }
 
 /* static */
-int ZipWritableMemFile::CloseFile(voidpf opaque, voidpf stream) {
+int ZipWritableMemFile::CloseFile(void* opaque, void* stream) {
   // Nothing to do.
   return 0;
 }
 
 /* static */
-int ZipWritableMemFile::ErrorFile(voidpf opaque, voidpf stream) {
+int ZipWritableMemFile::ErrorFile(void* opaque, void* stream) {
   // Unused.
   return 0;
 }
diff -up chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.h.21~ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.h
--- chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.h.21~	2023-11-01 19:11:24.990743600 +0100
+++ chromium-119.0.6045.105/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_writable_mem_file.h	2023-11-02 01:06:32.076953892 +0100
@@ -19,7 +19,7 @@ limitations under the License.
 #include <cstdlib>
 
 #include "absl/strings/string_view.h"  // from @com_google_absl
-#include "third_party/zlib/contrib/minizip/ioapi.h"
+#include <minizip/ioapi.h>
 
 namespace tflite {
 namespace metadata {
@@ -57,15 +57,15 @@ class ZipWritableMemFile {
   size_t Size() const { return data_.size(); }
 
   // The file function implementations used in the `zlib_filefunc64_def`.
-  static voidpf OpenFile(voidpf opaque, const void* filename, int mode);
-  static uLong ReadFile(voidpf opaque, voidpf stream, void* buf, uLong size);
-  static uLong WriteFile(voidpf opaque, voidpf stream, const void* buf,
-                         uLong size);
-  static ZPOS64_T TellFile(voidpf opaque, voidpf stream);
+  static void* OpenFile(void* opaque, const void* filename, int mode);
+  static unsigned long ReadFile(void* opaque, void* stream, void* buf, unsigned long size);
+  static unsigned long WriteFile(void* opaque, void* stream, const void* buf,
+                         unsigned long size);
+  static ZPOS64_T TellFile(void* opaque, void* stream);
   static long SeekFile  // NOLINT
-      (voidpf opaque, voidpf stream, ZPOS64_T offset, int origin);
-  static int CloseFile(voidpf opaque, voidpf stream);
-  static int ErrorFile(voidpf opaque, voidpf stream);
+      (void* opaque, void* stream, ZPOS64_T offset, int origin);
+  static int CloseFile(void* opaque, void* stream);
+  static int ErrorFile(void* opaque, void* stream);
 };
 
 }  // namespace metadata

diff -up chromium-116.0.5845.96/cef/patch/patches/chrome_runtime_views.patch.omv~ chromium-116.0.5845.96/cef/patch/patches/chrome_runtime_views.patch
--- chromium-116.0.5845.96/cef/patch/patches/chrome_runtime_views.patch.omv~	2023-08-21 16:46:12.719309952 +0200
+++ chromium-116.0.5845.96/cef/patch/patches/chrome_runtime_views.patch	2023-08-21 16:50:05.041791654 +0200
@@ -1,8 +1,7 @@
-diff --git chrome/browser/ui/browser_command_controller.cc chrome/browser/ui/browser_command_controller.cc
-index 405c0ac7c41ef..99abcefc0c061 100644
---- chrome/browser/ui/browser_command_controller.cc
-+++ chrome/browser/ui/browser_command_controller.cc
-@@ -400,6 +400,7 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+diff -up chrome/browser/ui/browser_command_controller.cc.cef1~ chrome/browser/ui/browser_command_controller.cc
+--- chrome/browser/ui/browser_command_controller.cc.cef1~	2023-08-21 16:42:23.294912054 +0200
++++ chrome/browser/ui/browser_command_controller.cc	2023-08-21 16:46:46.765111220 +0200
+@@ -399,6 +399,7 @@ bool BrowserCommandController::ExecuteCo
    // choose to not implement CommandUpdaterDelegate inside this class and
    // therefore command_updater_ doesn't have the delegate set).
    if (!SupportsCommand(id) || !IsCommandEnabled(id)) {
@@ -10,7 +9,7 @@ index 405c0ac7c41ef..99abcefc0c061 10064
      return false;
    }
  
-@@ -416,6 +417,13 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+@@ -415,6 +416,13 @@ bool BrowserCommandController::ExecuteCo
    DCHECK(command_updater_.IsCommandEnabled(id))
        << "Invalid/disabled command " << id;
  
@@ -24,7 +23,7 @@ index 405c0ac7c41ef..99abcefc0c061 10064
    // The order of commands in this switch statement must match the function
    // declaration order in browser.h!
    switch (id) {
-@@ -1147,11 +1155,13 @@ void BrowserCommandController::TabRestoreServiceLoaded(
+@@ -1146,11 +1154,13 @@ void BrowserCommandController::TabRestor
  // BrowserCommandController, private:
  
  bool BrowserCommandController::IsShowingMainUI() {
@@ -40,11 +39,10 @@ index 405c0ac7c41ef..99abcefc0c061 10064
  }
  
  bool BrowserCommandController::IsWebAppOrCustomTab() const {
-diff --git chrome/browser/ui/toolbar/app_menu_model.cc chrome/browser/ui/toolbar/app_menu_model.cc
-index ca8fd414586c1..820df2f729fba 100644
---- chrome/browser/ui/toolbar/app_menu_model.cc
-+++ chrome/browser/ui/toolbar/app_menu_model.cc
-@@ -585,6 +585,57 @@ SaveAndShareSubMenuModel::SaveAndShareSubMenuModel(
+diff -up chrome/browser/ui/toolbar/app_menu_model.cc.cef1~ chrome/browser/ui/toolbar/app_menu_model.cc
+--- chrome/browser/ui/toolbar/app_menu_model.cc.cef1~	2023-08-21 16:42:22.035906015 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.cc	2023-08-21 16:46:46.766111244 +0200
+@@ -530,6 +530,57 @@ SaveAndShareSubMenuModel::SaveAndShareSu
    }
  }
  
@@ -102,7 +100,7 @@ index ca8fd414586c1..820df2f729fba 10064
  }  // namespace
  
  ////////////////////////////////////////////////////////////////////////////////
-@@ -1303,7 +1354,7 @@ bool AppMenuModel::IsCommandIdChecked(int command_id) const {
+@@ -1248,7 +1299,7 @@ bool AppMenuModel::IsCommandIdChecked(in
    return false;
  }
  
@@ -111,7 +109,7 @@ index ca8fd414586c1..820df2f729fba 10064
    GlobalError* error =
        GlobalErrorServiceFactory::GetForProfile(browser_->profile())
            ->GetGlobalErrorByMenuItemCommandID(command_id);
-@@ -1318,6 +1369,30 @@ bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
+@@ -1263,6 +1314,30 @@ bool AppMenuModel::IsCommandIdEnabled(in
    }
  }
  
@@ -142,7 +140,7 @@ index ca8fd414586c1..820df2f729fba 10064
  bool AppMenuModel::IsCommandIdAlerted(int command_id) const {
    if ((command_id == IDC_RECENT_TABS_MENU) ||
        (command_id == AppMenuModel::kMinRecentTabsCommandId)) {
-@@ -1472,11 +1547,15 @@ void AppMenuModel::Build() {
+@@ -1417,11 +1492,15 @@ void AppMenuModel::Build() {
      }
    }
  
@@ -163,7 +161,7 @@ index ca8fd414586c1..820df2f729fba 10064
  
    AddItemWithStringId(IDC_PRINT, IDS_PRINT);
  
-@@ -1549,9 +1628,13 @@ void AppMenuModel::Build() {
+@@ -1494,9 +1573,13 @@ void AppMenuModel::Build() {
                           kMoreToolsMenuItem);
  
    if (!features::IsChromeRefresh2023()) {
@@ -180,7 +178,7 @@ index ca8fd414586c1..820df2f729fba 10064
    }
  
    if (!features::IsChromeRefresh2023()) {
-@@ -1633,6 +1716,11 @@ void AppMenuModel::Build() {
+@@ -1578,6 +1661,11 @@ void AppMenuModel::Build() {
      SetCommandIcon(this, IDC_EXIT, kExitMenuIcon);
    }
  
@@ -192,11 +190,10 @@ index ca8fd414586c1..820df2f729fba 10064
    uma_action_recorded_ = false;
  }
  
-diff --git chrome/browser/ui/toolbar/app_menu_model.h chrome/browser/ui/toolbar/app_menu_model.h
-index 96c64caf86ef7..27d346fdbf5a5 100644
---- chrome/browser/ui/toolbar/app_menu_model.h
-+++ chrome/browser/ui/toolbar/app_menu_model.h
-@@ -194,6 +194,7 @@ class AppMenuModel : public ui::SimpleMenuModel,
+diff -up chrome/browser/ui/toolbar/app_menu_model.h.cef1~ chrome/browser/ui/toolbar/app_menu_model.h
+--- chrome/browser/ui/toolbar/app_menu_model.h.cef1~	2023-08-14 20:45:40.262099500 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.h	2023-08-21 16:46:46.766111244 +0200
+@@ -194,6 +194,7 @@ class AppMenuModel : public ui::SimpleMe
    void ExecuteCommand(int command_id, int event_flags) override;
    bool IsCommandIdChecked(int command_id) const override;
    bool IsCommandIdEnabled(int command_id) const override;
@@ -204,7 +201,7 @@ index 96c64caf86ef7..27d346fdbf5a5 10064
    bool IsCommandIdAlerted(int command_id) const override;
    bool GetAcceleratorForCommandId(int command_id,
                                    ui::Accelerator* accelerator) const override;
-@@ -218,6 +219,8 @@ class AppMenuModel : public ui::SimpleMenuModel,
+@@ -218,6 +219,8 @@ class AppMenuModel : public ui::SimpleMe
    // Appends a zoom menu (without separators).
    void CreateZoomMenu();
  
@@ -213,11 +210,10 @@ index 96c64caf86ef7..27d346fdbf5a5 10064
   private:
    // Adds actionable global error menu items to the menu.
    // Examples: Extension permissions and sign in errors.
-diff --git chrome/browser/ui/views/find_bar_host.cc chrome/browser/ui/views/find_bar_host.cc
-index 59024587ef6b7..0c30aa71768cf 100644
---- chrome/browser/ui/views/find_bar_host.cc
-+++ chrome/browser/ui/views/find_bar_host.cc
-@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::Rect* bounds) {
+diff -up chrome/browser/ui/views/find_bar_host.cc.cef1~ chrome/browser/ui/views/find_bar_host.cc
+--- chrome/browser/ui/views/find_bar_host.cc.cef1~	2023-08-14 20:45:40.330105800 +0200
++++ chrome/browser/ui/views/find_bar_host.cc	2023-08-21 16:46:46.766111244 +0200
+@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::R
    // The BrowserView does Layout for the components that we care about
    // positioning relative to, so we ask it to tell us where we should go.
    *bounds = browser_view()->GetFindBarBoundingBox();
@@ -230,11 +226,10 @@ index 59024587ef6b7..0c30aa71768cf 10064
  }
  
  void FindBarHost::RegisterAccelerators() {
-diff --git chrome/browser/ui/views/frame/browser_frame.cc chrome/browser/ui/views/frame/browser_frame.cc
-index d9f30b0876f4a..c4675bf8b95b7 100644
---- chrome/browser/ui/views/frame/browser_frame.cc
-+++ chrome/browser/ui/views/frame/browser_frame.cc
-@@ -75,15 +75,23 @@ bool IsUsingLinuxSystemTheme(Profile* profile) {
+diff -up chrome/browser/ui/views/frame/browser_frame.cc.cef1~ chrome/browser/ui/views/frame/browser_frame.cc
+--- chrome/browser/ui/views/frame/browser_frame.cc.cef1~	2023-08-21 16:42:22.341913150 +0200
++++ chrome/browser/ui/views/frame/browser_frame.cc	2023-08-21 16:48:11.758114811 +0200
+@@ -75,15 +75,23 @@ bool IsUsingLinuxSystemTheme(Profile* pr
  ////////////////////////////////////////////////////////////////////////////////
  // BrowserFrame, public:
  
@@ -260,7 +255,7 @@ index d9f30b0876f4a..c4675bf8b95b7 10064
  }
  
  BrowserFrame::~BrowserFrame() {}
-@@ -178,6 +186,12 @@ void BrowserFrame::LayoutWebAppWindowTitle(
+@@ -178,6 +186,12 @@ void BrowserFrame::LayoutWebAppWindowTit
  }
  
  int BrowserFrame::GetTopInset() const {
@@ -273,7 +268,7 @@ index d9f30b0876f4a..c4675bf8b95b7 10064
    return browser_frame_view_->GetTopInset(false);
  }
  
-@@ -194,6 +208,8 @@ BrowserNonClientFrameView* BrowserFrame::GetFrameView() const {
+@@ -194,6 +208,8 @@ BrowserNonClientFrameView* BrowserFrame:
  }
  
  bool BrowserFrame::UseCustomFrame() const {
@@ -282,7 +277,7 @@ index d9f30b0876f4a..c4675bf8b95b7 10064
    return native_browser_frame_->UseCustomFrame();
  }
  
-@@ -207,20 +223,30 @@ bool BrowserFrame::ShouldDrawFrameHeader() const {
+@@ -207,20 +223,30 @@ bool BrowserFrame::ShouldDrawFrameHeader
  
  void BrowserFrame::GetWindowPlacement(gfx::Rect* bounds,
                                        ui::WindowShowState* show_state) const {
@@ -322,7 +317,7 @@ index d9f30b0876f4a..c4675bf8b95b7 10064
    chrome::SaveWindowWorkspace(browser_view_->browser(), GetWorkspace());
    chrome::SaveWindowVisibleOnAllWorkspaces(browser_view_->browser(),
                                             IsVisibleOnAllWorkspaces());
-@@ -411,6 +439,8 @@ void BrowserFrame::OnNativeThemeUpdated(ui::NativeTheme* observed_theme) {
+@@ -411,6 +439,8 @@ void BrowserFrame::OnNativeThemeUpdated(
  
  ui::ColorProviderManager::Key BrowserFrame::GetColorProviderKey() const {
    auto key = Widget::GetColorProviderKey();
@@ -331,19 +326,19 @@ index d9f30b0876f4a..c4675bf8b95b7 10064
  
    // color_mode.
    [this, &key]() {
-@@ -558,5 +588,8 @@ bool BrowserFrame::RegenerateFrameOnThemeChange(
+@@ -558,6 +588,9 @@ bool BrowserFrame::RegenerateFrameOnThem
  }
  
  bool BrowserFrame::IsIncognitoBrowser() const {
 +  if (!browser_view_) {
 +    return true;
 +  }
+   if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
+     return false;
    return browser_view_->browser()->profile()->IsIncognitoProfile();
- }
-diff --git chrome/browser/ui/views/frame/browser_frame.h chrome/browser/ui/views/frame/browser_frame.h
-index 965bd2525b212..6a637609b65e9 100644
---- chrome/browser/ui/views/frame/browser_frame.h
-+++ chrome/browser/ui/views/frame/browser_frame.h
+diff -up chrome/browser/ui/views/frame/browser_frame.h.cef1~ chrome/browser/ui/views/frame/browser_frame.h
+--- chrome/browser/ui/views/frame/browser_frame.h.cef1~	2023-08-14 20:45:40.334106200 +0200
++++ chrome/browser/ui/views/frame/browser_frame.h	2023-08-21 16:46:46.767111267 +0200
 @@ -61,7 +61,9 @@ enum class TabDragKind {
  // This is a virtual interface that allows system specific browser frames.
  class BrowserFrame : public views::Widget, public views::ContextMenuController {
@@ -354,10 +349,9 @@ index 965bd2525b212..6a637609b65e9 10064
  
    BrowserFrame(const BrowserFrame&) = delete;
    BrowserFrame& operator=(const BrowserFrame&) = delete;
-diff --git chrome/browser/ui/views/frame/browser_view.cc chrome/browser/ui/views/frame/browser_view.cc
-index 37850210f4b6e..7edd178950679 100644
---- chrome/browser/ui/views/frame/browser_view.cc
-+++ chrome/browser/ui/views/frame/browser_view.cc
+diff -up chrome/browser/ui/views/frame/browser_view.cc.cef1~ chrome/browser/ui/views/frame/browser_view.cc
+--- chrome/browser/ui/views/frame/browser_view.cc.cef1~	2023-08-21 16:42:22.337913057 +0200
++++ chrome/browser/ui/views/frame/browser_view.cc	2023-08-21 16:46:46.768111291 +0200
 @@ -327,11 +327,10 @@ using content::NativeWebKeyboardEvent;
  using content::WebContents;
  using web_modal::WebContentsModalDialogHost;
@@ -373,7 +367,7 @@ index 37850210f4b6e..7edd178950679 10064
  
  #if BUILDFLAG(IS_CHROMEOS_ASH)
  // UMA histograms that record animation smoothness for tab loading animation.
-@@ -800,11 +799,22 @@ class BrowserView::AccessibilityModeObserver : public ui::AXModeObserver {
+@@ -800,11 +799,22 @@ class BrowserView::AccessibilityModeObse
  ///////////////////////////////////////////////////////////////////////////////
  // BrowserView, public:
  
@@ -397,7 +391,7 @@ index 37850210f4b6e..7edd178950679 10064
    SetShowIcon(
        ::ShouldShowWindowIcon(browser_.get(), AppUsesWindowControlsOverlay()));
  
-@@ -848,7 +858,6 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -848,7 +858,6 @@ BrowserView::BrowserView(std::unique_ptr
    }
  
    browser_->tab_strip_model()->AddObserver(this);
@@ -405,7 +399,7 @@ index 37850210f4b6e..7edd178950679 10064
  
    // Top container holds tab strip region and toolbar and lives at the front of
    // the view hierarchy.
-@@ -904,8 +913,15 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -904,8 +913,15 @@ BrowserView::BrowserView(std::unique_ptr
    contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
        devtools_web_view_, contents_web_view_));
  
@@ -423,7 +417,7 @@ index 37850210f4b6e..7edd178950679 10064
  
    contents_separator_ =
        top_container_->AddChildView(std::make_unique<ContentsSeparator>());
-@@ -1093,12 +1109,14 @@ gfx::Size BrowserView::GetWebAppFrameToolbarPreferredSize() const {
+@@ -1093,12 +1109,14 @@ gfx::Size BrowserView::GetWebAppFrameToo
  
  #if BUILDFLAG(IS_MAC)
  bool BrowserView::UsesImmersiveFullscreenMode() const {
@@ -440,7 +434,7 @@ index 37850210f4b6e..7edd178950679 10064
  }
  
  bool BrowserView::UsesImmersiveFullscreenTabbedMode() const {
-@@ -1823,6 +1841,8 @@ bool BrowserView::ShouldHideUIForFullscreen() const {
+@@ -1827,6 +1845,8 @@ bool BrowserView::ShouldHideUIForFullscr
    if (immersive_mode_controller_->IsEnabled())
      return false;
  
@@ -449,7 +443,7 @@ index 37850210f4b6e..7edd178950679 10064
    return frame_->GetFrameView()->ShouldHideTopUIForFullscreen();
  }
  
-@@ -2821,7 +2841,8 @@ DownloadShelf* BrowserView::GetDownloadShelf() {
+@@ -2825,7 +2845,8 @@ DownloadShelf* BrowserView::GetDownloadS
  }
  
  DownloadBubbleUIController* BrowserView::GetDownloadBubbleUIController() {
@@ -459,7 +453,7 @@ index 37850210f4b6e..7edd178950679 10064
    if (auto* download_button = toolbar_button_provider_->GetDownloadButton())
      return download_button->bubble_controller();
    return nullptr;
-@@ -3357,7 +3378,8 @@ void BrowserView::ReparentTopContainerForEndOfImmersive() {
+@@ -3361,7 +3382,8 @@ void BrowserView::ReparentTopContainerFo
    if (top_container()->parent() == this)
      return;
  
@@ -469,7 +463,7 @@ index 37850210f4b6e..7edd178950679 10064
    top_container()->DestroyLayer();
    AddChildViewAt(top_container(), 0);
    EnsureFocusOrder();
-@@ -3914,8 +3936,10 @@ void BrowserView::Layout() {
+@@ -3918,8 +3940,10 @@ void BrowserView::Layout() {
  
    // TODO(jamescook): Why was this in the middle of layout code?
    toolbar_->location_bar()->omnibox_view()->SetFocusBehavior(
@@ -482,7 +476,7 @@ index 37850210f4b6e..7edd178950679 10064
  
    // Some of the situations when the BrowserView is laid out are:
    // - Enter/exit immersive fullscreen mode.
-@@ -3981,6 +4005,11 @@ void BrowserView::AddedToWidget() {
+@@ -3985,6 +4009,11 @@ void BrowserView::AddedToWidget() {
    SetThemeProfileForWindow(GetNativeWindow(), browser_->profile());
  #endif
  
@@ -494,7 +488,7 @@ index 37850210f4b6e..7edd178950679 10064
    toolbar_->Init();
  
    // TODO(pbos): Investigate whether the side panels should be creatable when
-@@ -4028,13 +4057,9 @@ void BrowserView::AddedToWidget() {
+@@ -4032,13 +4061,9 @@ void BrowserView::AddedToWidget() {
  
    EnsureFocusOrder();
  
@@ -510,7 +504,7 @@ index 37850210f4b6e..7edd178950679 10064
    using_native_frame_ = frame_->ShouldUseNativeFrame();
  
    MaybeInitializeWebUITabStrip();
-@@ -4439,7 +4464,8 @@ void BrowserView::ProcessFullscreen(bool fullscreen,
+@@ -4443,7 +4468,8 @@ void BrowserView::ProcessFullscreen(bool
    // Undo our anti-jankiness hacks and force a re-layout.
    in_process_fullscreen_ = false;
    ToolbarSizeChanged(false);
@@ -520,7 +514,7 @@ index 37850210f4b6e..7edd178950679 10064
  }
  
  bool BrowserView::ShouldUseImmersiveFullscreenForUrl(const GURL& url) const {
-@@ -4810,6 +4836,8 @@ Profile* BrowserView::GetProfile() {
+@@ -4814,6 +4840,8 @@ Profile* BrowserView::GetProfile() {
  }
  
  void BrowserView::UpdateUIForTabFullscreen() {
@@ -529,7 +523,7 @@ index 37850210f4b6e..7edd178950679 10064
    frame()->GetFrameView()->UpdateFullscreenTopUI();
  }
  
-@@ -4832,6 +4860,8 @@ void BrowserView::HideDownloadShelf() {
+@@ -4836,6 +4864,8 @@ void BrowserView::HideDownloadShelf() {
  }
  
  bool BrowserView::CanUserExitFullscreen() const {
@@ -538,11 +532,10 @@ index 37850210f4b6e..7edd178950679 10064
    return frame_->GetFrameView()->CanUserExitFullscreen();
  }
  
-diff --git chrome/browser/ui/views/frame/browser_view.h chrome/browser/ui/views/frame/browser_view.h
-index 7145cc6ad5d17..244541e471d2a 100644
---- chrome/browser/ui/views/frame/browser_view.h
-+++ chrome/browser/ui/views/frame/browser_view.h
-@@ -124,11 +124,16 @@ class BrowserView : public BrowserWindow,
+diff -up chrome/browser/ui/views/frame/browser_view.h.cef1~ chrome/browser/ui/views/frame/browser_view.h
+--- chrome/browser/ui/views/frame/browser_view.h.cef1~	2023-08-14 20:45:41.342106800 +0200
++++ chrome/browser/ui/views/frame/browser_view.h	2023-08-21 16:46:46.768111291 +0200
+@@ -124,11 +124,16 @@ class BrowserView : public BrowserWindow
                      public webapps::AppBannerManager::Observer {
   public:
    METADATA_HEADER(BrowserView);
@@ -559,7 +552,7 @@ index 7145cc6ad5d17..244541e471d2a 10064
    void set_frame(BrowserFrame* frame) {
      frame_ = frame;
      paint_as_active_subscription_ =
-@@ -784,6 +789,12 @@ class BrowserView : public BrowserWindow,
+@@ -784,6 +789,12 @@ class BrowserView : public BrowserWindow
      return web_app_frame_toolbar();
    }
  
@@ -572,10 +565,9 @@ index 7145cc6ad5d17..244541e471d2a 10064
   private:
    // Do not friend BrowserViewLayout. Use the BrowserViewLayoutDelegate
    // interface to keep these two classes decoupled and testable.
-diff --git chrome/browser/ui/views/frame/browser_view_layout.cc chrome/browser/ui/views/frame/browser_view_layout.cc
-index 25fa3e495f4b1..21ef37e0b2495 100644
---- chrome/browser/ui/views/frame/browser_view_layout.cc
-+++ chrome/browser/ui/views/frame/browser_view_layout.cc
+diff -up chrome/browser/ui/views/frame/browser_view_layout.cc.cef1~ chrome/browser/ui/views/frame/browser_view_layout.cc
+--- chrome/browser/ui/views/frame/browser_view_layout.cc.cef1~	2023-08-14 20:45:40.342106800 +0200
++++ chrome/browser/ui/views/frame/browser_view_layout.cc	2023-08-21 16:46:46.768111291 +0200
 @@ -47,6 +47,10 @@
  #include "ui/views/window/client_view.h"
  #include "ui/views/window/hit_test_utils.h"
@@ -587,7 +579,7 @@ index 25fa3e495f4b1..21ef37e0b2495 10064
  using views::View;
  using web_modal::ModalDialogHostObserver;
  using web_modal::WebContentsModalDialogHost;
-@@ -569,6 +573,13 @@ int BrowserViewLayout::LayoutWebUITabStrip(int top) {
+@@ -569,6 +573,13 @@ int BrowserViewLayout::LayoutWebUITabStr
  
  int BrowserViewLayout::LayoutToolbar(int top) {
    TRACE_EVENT0("ui", "BrowserViewLayout::LayoutToolbar");
@@ -601,10 +593,9 @@ index 25fa3e495f4b1..21ef37e0b2495 10064
    int browser_view_width = vertical_layout_rect_.width();
    bool toolbar_visible = delegate_->IsToolbarVisible();
    int height = toolbar_visible ? toolbar_->GetPreferredSize().height() : 0;
-diff --git chrome/browser/ui/views/frame/contents_web_view.cc chrome/browser/ui/views/frame/contents_web_view.cc
-index 5e059b9878fc2..c1f6fbcd40ec4 100644
---- chrome/browser/ui/views/frame/contents_web_view.cc
-+++ chrome/browser/ui/views/frame/contents_web_view.cc
+diff -up chrome/browser/ui/views/frame/contents_web_view.cc.cef1~ chrome/browser/ui/views/frame/contents_web_view.cc
+--- chrome/browser/ui/views/frame/contents_web_view.cc.cef1~	2023-08-14 20:45:40.342106800 +0200
++++ chrome/browser/ui/views/frame/contents_web_view.cc	2023-08-21 16:46:46.768111291 +0200
 @@ -26,6 +26,11 @@
  ContentsWebView::ContentsWebView(content::BrowserContext* browser_context)
      : views::WebView(browser_context),
@@ -617,11 +608,10 @@ index 5e059b9878fc2..c1f6fbcd40ec4 10064
  }
  
  ContentsWebView::~ContentsWebView() {
-diff --git chrome/browser/ui/views/page_action/page_action_icon_controller.cc chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-index 09e828d1e079e..7f42618d67e77 100644
---- chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-+++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-@@ -94,6 +94,12 @@ void PageActionIconController::Init(const PageActionIconParams& params,
+diff -up chrome/browser/ui/views/page_action/page_action_icon_controller.cc.cef1~ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
+--- chrome/browser/ui/views/page_action/page_action_icon_controller.cc.cef1~	2023-08-14 20:45:40.378110200 +0200
++++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc	2023-08-21 16:46:46.768111291 +0200
+@@ -94,6 +94,12 @@ void PageActionIconController::Init(cons
    };
  
    for (PageActionIconType type : params.types_enabled) {
@@ -634,11 +624,10 @@ index 09e828d1e079e..7f42618d67e77 10064
      switch (type) {
        case PageActionIconType::kPaymentsOfferNotification:
          add_page_action_icon(
-diff --git chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-index fb8bfdbcb2bd5..741d84ecba4ea 100644
---- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-+++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-@@ -559,29 +559,41 @@ gfx::Range BrowserTabStripController::ListTabsInGroup(
+diff -up chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.cef1~ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+--- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.cef1~	2023-08-14 20:45:40.438115800 +0200
++++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc	2023-08-21 16:46:46.768111291 +0200
+@@ -559,29 +559,41 @@ gfx::Range BrowserTabStripController::Li
  }
  
  bool BrowserTabStripController::IsFrameCondensed() const {
@@ -680,11 +669,10 @@ index fb8bfdbcb2bd5..741d84ecba4ea 10064
    return GetFrameView()->GetCustomBackgroundId(active_state);
  }
  
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.cc chrome/browser/ui/views/toolbar/toolbar_view.cc
-index c9e50271f2716..182d75fc96ab6 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.cc
-+++ chrome/browser/ui/views/toolbar/toolbar_view.cc
-@@ -182,7 +182,7 @@ class TabstripLikeBackground : public views::Background {
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.cc.cef1~ chrome/browser/ui/views/toolbar/toolbar_view.cc
+--- chrome/browser/ui/views/toolbar/toolbar_view.cc.cef1~	2023-08-21 16:42:22.327912823 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.cc	2023-08-21 16:49:22.675789807 +0200
+@@ -182,7 +182,7 @@ class TabstripLikeBackground : public vi
    void Paint(gfx::Canvas* canvas, views::View* view) const override {
      bool painted = TopContainerBackground::PaintThemeCustomImage(
          canvas, view, browser_view_, /*translate_view_coordinates=*/false);
@@ -693,7 +681,7 @@ index c9e50271f2716..182d75fc96ab6 10064
        SkColor frame_color =
            browser_view_->frame()->GetFrameView()->GetFrameColor(
                BrowserFrameActiveState::kUseCurrent);
-@@ -208,12 +208,13 @@ class ToolbarView::ContainerView : public views::View {
+@@ -208,12 +208,13 @@ class ToolbarView::ContainerView : publi
  ////////////////////////////////////////////////////////////////////////////////
  // ToolbarView, public:
  
@@ -771,16 +759,15 @@ index c9e50271f2716..182d75fc96ab6 10064
  
    std::unique_ptr<SidePanelToolbarButton> side_panel_button;
    std::unique_ptr<SidePanelToolbarContainer> side_panel_toolbar_container;
--  if (browser_view_->unified_side_panel()) {
-+  if (browser_view_->unified_side_panel() && BUTTON_VISIBLE(kSidePanel)) {
+-  if (browser_view_->unified_side_panel() &&
++  if (browser_view_->unified_side_panel() && BUTTON_VISIBLE(kSidePanel) &&
+       !base::CommandLine::ForCurrentProcess()->HasSwitch("hide-sidepanel-button")) {
      if (companion::IsCompanionFeatureEnabled()) {
        side_panel_toolbar_container =
-           std::make_unique<SidePanelToolbarContainer>(browser_view_);
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.h chrome/browser/ui/views/toolbar/toolbar_view.h
-index be3bd96444563..96669547e3ccf 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.h
-+++ chrome/browser/ui/views/toolbar/toolbar_view.h
-@@ -89,7 +89,8 @@ class ToolbarView : public views::AccessiblePaneView,
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.h.cef1~ chrome/browser/ui/views/toolbar/toolbar_view.h
+--- chrome/browser/ui/views/toolbar/toolbar_view.h.cef1~	2023-08-14 20:45:40.462118000 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.h	2023-08-21 16:46:46.769111314 +0200
+@@ -89,7 +89,8 @@ class ToolbarView : public views::Access
                  // needs to be displayed.
    };
  
diff -up chromium-116.0.5845.96/cef/patch/patches/content_2015.patch.omv~ chromium-116.0.5845.96/cef/patch/patches/content_2015.patch
--- chromium-116.0.5845.96/cef/patch/patches/content_2015.patch.omv~	2023-08-21 16:50:38.701588213 +0200
+++ chromium-116.0.5845.96/cef/patch/patches/content_2015.patch	2023-08-21 16:51:26.137711605 +0200
@@ -1,7 +1,6 @@
-diff --git content/browser/devtools/devtools_http_handler.cc content/browser/devtools/devtools_http_handler.cc
-index f4f583be8fba9..a2ed253f3724d 100644
---- content/browser/devtools/devtools_http_handler.cc
-+++ content/browser/devtools/devtools_http_handler.cc
+diff -up content/browser/devtools/devtools_http_handler.cc.cef2~ content/browser/devtools/devtools_http_handler.cc
+--- content/browser/devtools/devtools_http_handler.cc.cef2~	2023-08-14 20:45:47.398664000 +0200
++++ content/browser/devtools/devtools_http_handler.cc	2023-08-21 16:50:59.067070405 +0200
 @@ -588,7 +588,7 @@ void DevToolsHttpHandler::OnJsonRequest(
      base::Value::Dict version;
      version.Set("Protocol-Version", DevToolsAgentHost::GetProtocolVersion());
@@ -11,11 +10,10 @@ index f4f583be8fba9..a2ed253f3724d 10064
      version.Set("User-Agent", GetContentClient()->browser()->GetUserAgent());
      version.Set("V8-Version", V8_VERSION_STRING);
      std::string host = info.GetHeaderValue("host");
-diff --git content/browser/loader/navigation_url_loader_impl.cc content/browser/loader/navigation_url_loader_impl.cc
-index b8649b77e9a29..0d25d60e81b1a 100644
---- content/browser/loader/navigation_url_loader_impl.cc
-+++ content/browser/loader/navigation_url_loader_impl.cc
-@@ -751,6 +751,17 @@ NavigationURLLoaderImpl::PrepareForNonInterceptedRequest() {
+diff -up content/browser/loader/navigation_url_loader_impl.cc.cef2~ content/browser/loader/navigation_url_loader_impl.cc
+--- content/browser/loader/navigation_url_loader_impl.cc.cef2~	2023-08-14 20:45:47.498673200 +0200
++++ content/browser/loader/navigation_url_loader_impl.cc	2023-08-21 16:50:59.068070429 +0200
+@@ -751,6 +751,17 @@ NavigationURLLoaderImpl::PrepareForNonIn
            resource_request_->has_user_gesture, initiating_origin,
            initiator_document_.AsRenderFrameHostIfValid(), &loader_factory);
  
@@ -33,11 +31,10 @@ index b8649b77e9a29..0d25d60e81b1a 10064
        if (loader_factory) {
          factory = base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
              std::move(loader_factory));
-diff --git content/public/browser/content_browser_client.cc content/public/browser/content_browser_client.cc
-index d7a8a6d628b79..9dd5a6f5992f4 100644
---- content/public/browser/content_browser_client.cc
-+++ content/public/browser/content_browser_client.cc
-@@ -1013,7 +1013,7 @@ ContentBrowserClient::CreateURLLoaderHandlerForServiceWorkerNavigationPreload(
+diff -up content/public/browser/content_browser_client.cc.cef2~ content/public/browser/content_browser_client.cc
+--- content/public/browser/content_browser_client.cc.cef2~	2023-08-14 20:45:46.870707300 +0200
++++ content/public/browser/content_browser_client.cc	2023-08-21 16:50:59.068070429 +0200
+@@ -1013,7 +1013,7 @@ ContentBrowserClient::CreateURLLoaderHan
  void ContentBrowserClient::OnNetworkServiceCreated(
      network::mojom::NetworkService* network_service) {}
  
@@ -46,7 +43,7 @@ index d7a8a6d628b79..9dd5a6f5992f4 10064
      BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -1022,6 +1022,7 @@ void ContentBrowserClient::ConfigureNetworkContextParams(
+@@ -1022,6 +1022,7 @@ void ContentBrowserClient::ConfigureNetw
          cert_verifier_creation_params) {
    network_context_params->user_agent = GetUserAgentBasedOnPolicy(context);
    network_context_params->accept_language = "en-us,en";
@@ -54,10 +51,9 @@ index d7a8a6d628b79..9dd5a6f5992f4 10064
  }
  
  std::vector<base::FilePath>
-diff --git content/public/browser/content_browser_client.h content/public/browser/content_browser_client.h
-index fe0b1b96209c4..e62fd5d108b89 100644
---- content/public/browser/content_browser_client.h
-+++ content/public/browser/content_browser_client.h
+diff -up content/public/browser/content_browser_client.h.cef2~ content/public/browser/content_browser_client.h
+--- content/public/browser/content_browser_client.h.cef2~	2023-08-14 20:45:47.870707300 +0200
++++ content/public/browser/content_browser_client.h	2023-08-21 16:50:59.069070452 +0200
 @@ -38,6 +38,7 @@
  #include "content/public/browser/mojo_binder_policy_map.h"
  #include "content/public/browser/privacy_sandbox_invoking_api.h"
@@ -66,7 +62,7 @@ index fe0b1b96209c4..e62fd5d108b89 10064
  #include "content/public/common/alternative_error_page_override_info.mojom-forward.h"
  #include "content/public/common/page_visibility_state.h"
  #include "content/public/common/window_container_type.mojom-forward.h"
-@@ -1878,7 +1879,7 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -1878,7 +1879,7 @@ class CONTENT_EXPORT ContentBrowserClien
    //
    // If |relative_partition_path| is the empty string, it means this needs to
    // create the default NetworkContext for the BrowserContext.
@@ -75,7 +71,7 @@ index fe0b1b96209c4..e62fd5d108b89 10064
        BrowserContext* context,
        bool in_memory,
        const base::FilePath& relative_partition_path,
-@@ -2086,6 +2087,19 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2086,6 +2087,19 @@ class CONTENT_EXPORT ContentBrowserClien
        RenderFrameHost* initiator_document,
        mojo::PendingRemote<network::mojom::URLLoaderFactory>* out_factory);
  
@@ -95,7 +91,7 @@ index fe0b1b96209c4..e62fd5d108b89 10064
    // Creates an OverlayWindow to be used for video or Picture-in-Picture.
    // This window will house the content shown when in Picture-in-Picture mode.
    // This will return a new OverlayWindow.
-@@ -2142,6 +2156,10 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2142,6 +2156,10 @@ class CONTENT_EXPORT ContentBrowserClien
    // Used as part of the user agent string.
    virtual std::string GetProduct();
  
@@ -106,11 +102,10 @@ index fe0b1b96209c4..e62fd5d108b89 10064
    // Returns the user agent. This can also return the reduced user agent, based
    // on blink::features::kUserAgentReduction. Content may cache this value.
    virtual std::string GetUserAgent();
-diff --git content/public/renderer/content_renderer_client.h content/public/renderer/content_renderer_client.h
-index a4130ad4dc815..b303f6c8768b7 100644
---- content/public/renderer/content_renderer_client.h
-+++ content/public/renderer/content_renderer_client.h
-@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClient {
+diff -up content/public/renderer/content_renderer_client.h.cef2~ content/public/renderer/content_renderer_client.h
+--- content/public/renderer/content_renderer_client.h.cef2~	2023-08-14 20:45:46.902710200 +0200
++++ content/public/renderer/content_renderer_client.h	2023-08-21 16:50:59.069070452 +0200
+@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClie
    // binding requests from RenderProcessHost::BindReceiver().
    virtual void ExposeInterfacesToBrowser(mojo::BinderMap* binders) {}
  
@@ -120,7 +115,7 @@ index a4130ad4dc815..b303f6c8768b7 10064
    // Notifies that a new RenderFrame has been created.
    virtual void RenderFrameCreated(RenderFrame* render_frame) {}
  
-@@ -318,6 +321,10 @@ class CONTENT_EXPORT ContentRendererClient {
+@@ -318,6 +321,10 @@ class CONTENT_EXPORT ContentRendererClie
    // This method may invalidate the frame.
    virtual void RunScriptsAtDocumentIdle(RenderFrame* render_frame) {}
  
@@ -131,24 +126,10 @@ index a4130ad4dc815..b303f6c8768b7 10064
    // Allows subclasses to enable some runtime features before Blink has
    // started.
    virtual void SetRuntimeFeaturesDefaultsBeforeBlinkInitialization() {}
-diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
-index b1ad4bd6c6108..b2f6cef961faf 100644
---- content/renderer/render_thread_impl.cc
-+++ content/renderer/render_thread_impl.cc
-@@ -620,6 +620,8 @@ void RenderThreadImpl::Init() {
-       GetContentClient()->renderer()->CreateURLLoaderThrottleProvider(
-           blink::URLLoaderThrottleProviderType::kFrame);
- 
-+  GetContentClient()->renderer()->RenderThreadConnected();
-+
-   GetAssociatedInterfaceRegistry()->AddInterface<mojom::Renderer>(
-       base::BindRepeating(&RenderThreadImpl::OnRendererInterfaceReceiver,
-                           base::Unretained(this)));
-diff --git content/renderer/renderer_blink_platform_impl.cc content/renderer/renderer_blink_platform_impl.cc
-index 134a4b1f1ce8f..c2de5eb620bf5 100644
---- content/renderer/renderer_blink_platform_impl.cc
-+++ content/renderer/renderer_blink_platform_impl.cc
-@@ -943,6 +943,15 @@ SkBitmap* RendererBlinkPlatformImpl::GetSadPageBitmap() {
+diff -up content/renderer/renderer_blink_platform_impl.cc.cef2~ content/renderer/renderer_blink_platform_impl.cc
+--- content/renderer/renderer_blink_platform_impl.cc.cef2~	2023-08-14 20:45:46.962715900 +0200
++++ content/renderer/renderer_blink_platform_impl.cc	2023-08-21 16:50:59.069070452 +0200
+@@ -943,6 +943,15 @@ SkBitmap* RendererBlinkPlatformImpl::Get
  
  //------------------------------------------------------------------------------
  
@@ -164,11 +145,10 @@ index 134a4b1f1ce8f..c2de5eb620bf5 10064
  std::unique_ptr<blink::WebV8ValueConverter>
  RendererBlinkPlatformImpl::CreateWebV8ValueConverter() {
    return std::make_unique<V8ValueConverterImpl>();
-diff --git content/renderer/renderer_blink_platform_impl.h content/renderer/renderer_blink_platform_impl.h
-index 587565fa2fd5d..d68eeea7e842e 100644
---- content/renderer/renderer_blink_platform_impl.h
-+++ content/renderer/renderer_blink_platform_impl.h
-@@ -224,6 +224,9 @@ class CONTENT_EXPORT RendererBlinkPlatformImpl : public BlinkPlatformImpl {
+diff -up content/renderer/renderer_blink_platform_impl.h.cef2~ content/renderer/renderer_blink_platform_impl.h
+--- content/renderer/renderer_blink_platform_impl.h.cef2~	2023-08-14 20:45:47.962715900 +0200
++++ content/renderer/renderer_blink_platform_impl.h	2023-08-21 16:50:59.070070476 +0200
+@@ -224,6 +224,9 @@ class CONTENT_EXPORT RendererBlinkPlatfo
    InertAndMinimumIntervalOfUserLevelMemoryPressureSignal() override;
  #endif  // BUILDFLAG(IS_ANDROID)
  
@@ -176,13 +156,24 @@ index 587565fa2fd5d..d68eeea7e842e 10064
 +  void DevToolsAgentDetached() override;
 +
    // Tells this platform that the renderer is locked to a site (i.e., a scheme
-   // plus eTLD+1, such as https://google.com), or to a more specific origin.
+   // plus eTLD+1, such as https://9oo91e.qjz9zk), or to a more specific origin.
    void SetIsLockedToSite();
-diff --git headless/lib/browser/headless_content_browser_client.cc headless/lib/browser/headless_content_browser_client.cc
-index 2a26ffc86c946..ee88229940a74 100644
---- headless/lib/browser/headless_content_browser_client.cc
-+++ headless/lib/browser/headless_content_browser_client.cc
-@@ -298,7 +298,7 @@ bool HeadlessContentBrowserClient::IsSharedStorageSelectURLAllowed(
+diff -up content/renderer/render_thread_impl.cc.cef2~ content/renderer/render_thread_impl.cc
+--- content/renderer/render_thread_impl.cc.cef2~	2023-08-14 20:45:47.958715400 +0200
++++ content/renderer/render_thread_impl.cc	2023-08-21 16:50:59.069070452 +0200
+@@ -620,6 +620,8 @@ void RenderThreadImpl::Init() {
+       GetContentClient()->renderer()->CreateURLLoaderThrottleProvider(
+           blink::URLLoaderThrottleProviderType::kFrame);
+ 
++  GetContentClient()->renderer()->RenderThreadConnected();
++
+   GetAssociatedInterfaceRegistry()->AddInterface<mojom::Renderer>(
+       base::BindRepeating(&RenderThreadImpl::OnRendererInterfaceReceiver,
+                           base::Unretained(this)));
+diff -up headless/lib/browser/headless_content_browser_client.cc.cef2~ headless/lib/browser/headless_content_browser_client.cc
+--- headless/lib/browser/headless_content_browser_client.cc.cef2~	2023-08-14 20:45:48.294838200 +0200
++++ headless/lib/browser/headless_content_browser_client.cc	2023-08-21 16:50:59.070070476 +0200
+@@ -298,7 +298,7 @@ bool HeadlessContentBrowserClient::IsSha
    return true;
  }
  
@@ -191,7 +182,7 @@ index 2a26ffc86c946..ee88229940a74 10064
      content::BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -308,6 +308,7 @@ void HeadlessContentBrowserClient::ConfigureNetworkContextParams(
+@@ -308,6 +308,7 @@ void HeadlessContentBrowserClient::Confi
    HeadlessBrowserContextImpl::From(context)->ConfigureNetworkContextParams(
        in_memory, relative_partition_path, network_context_params,
        cert_verifier_creation_params);
@@ -199,11 +190,10 @@ index 2a26ffc86c946..ee88229940a74 10064
  }
  
  std::string HeadlessContentBrowserClient::GetProduct() {
-diff --git headless/lib/browser/headless_content_browser_client.h headless/lib/browser/headless_content_browser_client.h
-index be37373d3d4e8..6741578a5f1b8 100644
---- headless/lib/browser/headless_content_browser_client.h
-+++ headless/lib/browser/headless_content_browser_client.h
-@@ -79,7 +79,7 @@ class HeadlessContentBrowserClient : public content::ContentBrowserClient {
+diff -up headless/lib/browser/headless_content_browser_client.h.cef2~ headless/lib/browser/headless_content_browser_client.h
+--- headless/lib/browser/headless_content_browser_client.h.cef2~	2023-08-14 20:45:48.294838200 +0200
++++ headless/lib/browser/headless_content_browser_client.h	2023-08-21 16:50:59.070070476 +0200
+@@ -79,7 +79,7 @@ class HeadlessContentBrowserClient : pub
        const url::Origin& top_frame_origin,
        const url::Origin& accessing_origin) override;
  

From 9e82ee5274ece4f0638bc665fbb418d730a16d0a Mon Sep 17 00:00:00 2001
From: Jonas Hahnfeld <hahnjo@hahnjo.de>
Date: Sun, 23 Feb 2025 12:34:44 +0100
Subject: [PATCH] [Support] Remove AlignedCharArrayUnion from Expected and
 ErrorOr, NFCI. (#127407)

They were instantiated with only a single type and union-members
themselves. By putting the types directly into a union, they are still
left uninitialized by default.
---
 llvm/include/llvm/Support/Error.h           | 13 ++++++-------
 llvm/include/llvm/Support/ErrorOr.h         | 14 +++++++-------
 llvm/include/llvm/Support/TrailingObjects.h |  1 -
 3 files changed, 13 insertions(+), 15 deletions(-)

Index: chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/Error.h
===================================================================
--- chromium-134.0.6998.35.orig/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/Error.h
+++ chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/Error.h
@@ -18,7 +18,6 @@
 #include "llvm/ADT/StringExtras.h"
 #include "llvm/ADT/Twine.h"
 #include "llvm/Config/abi-breaking.h"
-#include "llvm/Support/AlignOf.h"
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/ErrorHandling.h"
@@ -669,22 +668,22 @@ private:
 
   storage_type *getStorage() {
     assert(!HasError && "Cannot get value when an error exists!");
-    return reinterpret_cast<storage_type *>(&TStorage);
+    return &TStorage;
   }
 
   const storage_type *getStorage() const {
     assert(!HasError && "Cannot get value when an error exists!");
-    return reinterpret_cast<const storage_type *>(&TStorage);
+    return &TStorage;
   }
 
   error_type *getErrorStorage() {
     assert(HasError && "Cannot get error when a value exists!");
-    return reinterpret_cast<error_type *>(&ErrorStorage);
+    return &ErrorStorage;
   }
 
   const error_type *getErrorStorage() const {
     assert(HasError && "Cannot get error when a value exists!");
-    return reinterpret_cast<const error_type *>(&ErrorStorage);
+    return &ErrorStorage;
   }
 
   // Used by ExpectedAsOutParameter to reset the checked flag.
@@ -716,8 +715,8 @@ private:
   }
 
   union {
-    AlignedCharArrayUnion<storage_type> TStorage;
-    AlignedCharArrayUnion<error_type> ErrorStorage;
+    storage_type TStorage;
+    error_type ErrorStorage;
   };
   bool HasError : 1;
 #if LLVM_ENABLE_ABI_BREAKING_CHECKS
Index: chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/ErrorOr.h
===================================================================
--- chromium-134.0.6998.35.orig/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/ErrorOr.h
+++ chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/ErrorOr.h
@@ -15,7 +15,6 @@
 #ifndef LLVM_SUPPORT_ERROROR_H
 #define LLVM_SUPPORT_ERROROR_H
 
-#include "llvm/Support/AlignOf.h"
 #include <cassert>
 #include <system_error>
 #include <type_traits>
@@ -235,26 +234,27 @@ private:
 
   storage_type *getStorage() {
     assert(!HasError && "Cannot get value when an error exists!");
-    return reinterpret_cast<storage_type *>(&TStorage);
+    return &TStorage;
   }
 
   const storage_type *getStorage() const {
     assert(!HasError && "Cannot get value when an error exists!");
-    return reinterpret_cast<const storage_type *>(&TStorage);
+    return &TStorage;
   }
 
   std::error_code *getErrorStorage() {
     assert(HasError && "Cannot get error when a value exists!");
-    return reinterpret_cast<std::error_code *>(&ErrorStorage);
+    return &ErrorStorage;
   }
 
   const std::error_code *getErrorStorage() const {
-    return const_cast<ErrorOr<T> *>(this)->getErrorStorage();
+    assert(HasError && "Cannot get error when a value exists!");
+    return &ErrorStorage;
   }
 
   union {
-    AlignedCharArrayUnion<storage_type> TStorage;
-    AlignedCharArrayUnion<std::error_code> ErrorStorage;
+    storage_type TStorage;
+    std::error_code ErrorStorage;
   };
   bool HasError : 1;
 };
Index: chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/TrailingObjects.h
===================================================================
--- chromium-134.0.6998.35.orig/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/TrailingObjects.h
+++ chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/TrailingObjects.h
@@ -46,7 +46,6 @@
 #ifndef LLVM_SUPPORT_TRAILINGOBJECTS_H
 #define LLVM_SUPPORT_TRAILINGOBJECTS_H
 
-#include "llvm/Support/AlignOf.h"
 #include "llvm/Support/Alignment.h"
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/MathExtras.h"
Index: chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/AlignOf.h
===================================================================
--- chromium-134.0.6998.35.orig/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/AlignOf.h
+++ chromium-134.0.6998.35/third_party/swiftshader/third_party/llvm-16.0/llvm/include/llvm/Support/AlignOf.h
@@ -20,7 +20,10 @@ namespace llvm {
 /// A suitably aligned and sized character array member which can hold elements
 /// of any type.
 template <typename T, typename... Ts> struct AlignedCharArrayUnion {
-  alignas(Ts...) char buffer[std::max({sizeof(Ts)...})];
+  // Work around "internal compiler error: Segmentation fault" with GCC 7.5,
+  // apparently caused by alignas(Ts...).
+  static constexpr std::size_t Align = std::max({alignof(T), alignof(Ts)...});
+  alignas(Align) char buffer[std::max({sizeof(T), sizeof(Ts)...})];
 };
 
 } // end namespace llvm

From c407d7c81e38f80458997d26a164e968baa52e2e Mon Sep 17 00:00:00 2001
From: Blaise <BlaiseD@GMail.com>
Date: Tue, 16 Jul 2024 16:32:26 -0500
Subject: [PATCH] Update to Chromium 126.0.6478.182

---
 chromium_version.txt                          |  2 +-
 domain_substitution.list                      |  1 -
 .../remove-unused-preferences-fields.patch    | 24 +++++++++++--------
 3 files changed, 15 insertions(+), 12 deletions(-)

diff --git a/chromium_version.txt b/chromium_version.txt
index 47024248e..5b1431366 100644
--- a/chromium_version.txt
+++ b/chromium_version.txt
@@ -1 +1 @@
-126.0.6478.126
+126.0.6478.182
diff --git a/domain_substitution.list b/domain_substitution.list
index 0662e6d56..208cfff0e 100644
--- a/domain_substitution.list
+++ b/domain_substitution.list
@@ -11974,7 +11974,6 @@ third_party/icu/source/tools/toolutil/pkg_genc.cpp
 third_party/inspector_protocol/crdtp/cbor.cc
 third_party/inspector_protocol/crdtp/json.cc
 third_party/inspector_protocol/roll.py
-third_party/instrumented_libs/focal/BUILD.gn
 third_party/ipcz/src/reference_drivers/random.cc
 third_party/isimpledom/ISimpleDOMDocument.idl
 third_party/isimpledom/ISimpleDOMNode.idl
diff --git a/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch b/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
index 7edeb5eda..2a9d57d48 100644
--- a/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
+++ b/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
@@ -4124,10 +4124,10 @@
  #include "components/offline_pages/task/closure_task.h"
  #include "components/prefs/pref_service.h"
 -#include "components/signin/public/base/signin_pref_names.h"
+ #include "ui/base/l10n/l10n_util.h"
  
  namespace feed {
- namespace {
-@@ -173,9 +172,6 @@ FeedStream::FeedStream(RefreshTaskSchedu
+@@ -174,9 +173,6 @@ FeedStream::FeedStream(RefreshTaskSchedu
    snippets_enabled_by_dse_.Init(prefs::kEnableSnippetsByDse, profile_prefs,
                                  preference_change_callback);
    has_stored_data_.Init(feed::prefs::kHasStoredData, profile_prefs);
@@ -5077,7 +5077,7 @@
  #include "net/base/ip_address.h"
 --- a/components/safe_browsing/core/browser/safe_browsing_metrics_collector.cc
 +++ b/components/safe_browsing/core/browser/safe_browsing_metrics_collector.cc
-@@ -13,13 +13,11 @@
+@@ -14,13 +14,11 @@
  #include "components/prefs/pref_service.h"
  #include "components/prefs/scoped_user_pref_update.h"
  #include "components/safe_browsing/core/browser/db/hit_report.h"
@@ -5091,7 +5091,7 @@
  
  const int kMetricsLoggingIntervalDay = 1;
  
-@@ -60,11 +58,6 @@ SafeBrowsingMetricsCollector::SafeBrowsi
+@@ -61,11 +59,6 @@ SafeBrowsingMetricsCollector::SafeBrowsi
      PrefService* pref_service)
      : pref_service_(pref_service) {
    pref_change_registrar_.Init(pref_service_);
@@ -5103,7 +5103,7 @@
  }
  
  void SafeBrowsingMetricsCollector::Shutdown() {
-@@ -72,16 +65,6 @@ void SafeBrowsingMetricsCollector::Shutd
+@@ -73,16 +66,6 @@ void SafeBrowsingMetricsCollector::Shutd
  }
  
  void SafeBrowsingMetricsCollector::StartLogging() {
@@ -5120,7 +5120,7 @@
  }
  
  void SafeBrowsingMetricsCollector::LogMetricsAndScheduleNextLogging() {
-@@ -90,80 +73,10 @@ void SafeBrowsingMetricsCollector::LogMe
+@@ -91,80 +74,10 @@ void SafeBrowsingMetricsCollector::LogMe
    MaybeLogDailyEsbProtegoPingSent();
    RemoveOldEventsFromPref();
  
@@ -5201,7 +5201,7 @@
  }
  
  void SafeBrowsingMetricsCollector::ScheduleNextLoggingAfterInterval(
-@@ -175,71 +88,16 @@ void SafeBrowsingMetricsCollector::Sched
+@@ -176,75 +89,16 @@ void SafeBrowsingMetricsCollector::Sched
  }
  
  void SafeBrowsingMetricsCollector::LogDailyOptInMetrics() {
@@ -5211,6 +5211,10 @@
 -                            IsExtendedReportingEnabled(*pref_service_));
 -  base::UmaHistogramBoolean("SafeBrowsing.Pref.Daily.SafeBrowsingModeManaged",
 -                            IsSafeBrowsingPolicyManaged(*pref_service_));
+-  base::UmaHistogramBoolean(
+-      "SafeBrowsing.Pref.Daily.PasswordLeakToggle",
+-      pref_service_->GetBoolean(
+-          password_manager::prefs::kPasswordLeakDetectionEnabled));
  }
  
  void SafeBrowsingMetricsCollector::LogDailyEventMetrics() {
@@ -5273,7 +5277,7 @@
  }
  
  void SafeBrowsingMetricsCollector::AddBypassEventToPref(
-@@ -284,15 +142,7 @@ std::optional<base::Time> SafeBrowsingMe
+@@ -289,15 +143,7 @@ std::optional<base::Time> SafeBrowsingMe
  std::optional<base::Time> SafeBrowsingMetricsCollector::GetLatestEventTimestamp(
      EventTypeFilter event_type_filter) {
    // Events are not logged when Safe Browsing is disabled.
@@ -5289,7 +5293,7 @@
  }
  
  std::optional<base::Time>
-@@ -304,45 +154,15 @@ SafeBrowsingMetricsCollector::GetLatestS
+@@ -309,45 +155,15 @@ SafeBrowsingMetricsCollector::GetLatestS
  void SafeBrowsingMetricsCollector::AddSafeBrowsingEventAndUserStateToPref(
      UserState user_state,
      EventType event_type) {
@@ -5336,7 +5340,7 @@
  }
  
  std::optional<SafeBrowsingMetricsCollector::Event>
-@@ -469,23 +289,6 @@ int SafeBrowsingMetricsCollector::GetEve
+@@ -474,23 +290,6 @@ int SafeBrowsingMetricsCollector::GetEve
    });
  }
  

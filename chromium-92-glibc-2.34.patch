diff -up chromium-92.0.4515.131/media/base/mime_util_internal.cc.omv~ chromium-92.0.4515.131/media/base/mime_util_internal.cc
diff -up chromium-92.0.4515.131/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc.omv~ chromium-92.0.4515.131/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
--- chromium-92.0.4515.131/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc.omv~	2021-08-15 02:10:38.094305050 +0200
+++ chromium-92.0.4515.131/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc	2021-08-15 02:11:37.544192899 +0200
@@ -178,6 +178,11 @@ ResultExpr EvaluateSyscallImpl(int fs_de
     return RestrictCloneToThreadsAndEPERMFork();
   }
 
+  // clone3 takes a pointer argument which we cannot examine, so return ENOSYS
+  // to force the libc to use clone. See https://crbug.com/1213452
+  if (sysno == __NR_clone3)
+    return Error(ENOSYS);
+
   if (sysno == __NR_fcntl)
     return RestrictFcntlCommands();
 
diff -up chromium-92.0.4515.131/sandbox/linux/services/credentials.cc.omv~ chromium-92.0.4515.131/sandbox/linux/services/credentials.cc
--- chromium-92.0.4515.131/sandbox/linux/services/credentials.cc.omv~	2021-08-15 02:03:17.973407324 +0200
+++ chromium-92.0.4515.131/sandbox/linux/services/credentials.cc	2021-08-15 02:03:55.416210507 +0200
@@ -98,7 +98,8 @@ bool ChrootToSafeEmptyDir() {
   // attempt this optimization.
   clone_flags |= CLONE_VM | CLONE_VFORK | CLONE_SETTLS;
 
-  char tls_buf[PTHREAD_STACK_MIN] = {0};
+  char tls_buf[PTHREAD_STACK_MIN];
+  memset(tls_buf, 0, PTHREAD_STACK_MIN);
   tls = tls_buf;
 #endif
 
diff -up chromium-92.0.4515.131/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc.omv~ chromium-92.0.4515.131/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
--- chromium-92.0.4515.131/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc.omv~	2021-08-15 01:28:17.479645470 +0200
+++ chromium-92.0.4515.131/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2021-08-15 01:28:27.410594516 +0200
@@ -138,7 +138,7 @@ void InstallAlternateStackLocked() {
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const unsigned kSigStackSize = std::max<const unsigned>(16384, SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.

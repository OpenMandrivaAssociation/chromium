diff -up chromium-141.0.7390.122/third_party/blink/renderer/platform/fonts/font_face_creation_params.h.16~ chromium-141.0.7390.122/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
--- chromium-141.0.7390.122/third_party/blink/renderer/platform/fonts/font_face_creation_params.h.16~	2025-10-21 00:02:24.000000000 +0200
+++ chromium-141.0.7390.122/third_party/blink/renderer/platform/fonts/font_face_creation_params.h	2025-10-26 17:53:05.712770659 +0100
@@ -79,8 +79,11 @@ class FontFaceCreationParams {
   }
   const std::string& Filename() const {
     DCHECK_EQ(creation_type_, kCreateFontByFciIdAndTtcIndex);
-#if defined(ADDRESS_SANITIZER)
-    DCHECK(filename_.has_value());
+#if 1
+    //DCHECK(filename_.has_value());
+    if (!filename_.has_value()) {
+      LOG(ERROR) << "filename has no value!";
+    }
     return *filename_;
 #else
     return filename_;
@@ -128,7 +131,7 @@ class FontFaceCreationParams {
   AtomicString family_;
 
   void SetFilename(std::string& filename) {
-#if defined(ADDRESS_SANITIZER)
+#if 1
     *filename_ = filename;
 #else
     filename_ = filename;
@@ -136,7 +139,7 @@ class FontFaceCreationParams {
   }
 
   bool FilenameEqual(const FontFaceCreationParams& other) const {
-#if defined(ADDRESS_SANITIZER)
+#if 1
     if (!filename_.has_value() || !other.filename_.has_value()) {
       return filename_.has_value() == other.filename_.has_value();
     }
@@ -147,14 +150,14 @@ class FontFaceCreationParams {
   }
 
   bool HasFilename() const {
-#if defined(ADDRESS_SANITIZER)
+#if 1
     return filename_.has_value();
 #else
     return true;
 #endif
   }
 
-#if defined(ADDRESS_SANITIZER)
+#if 1
   // We put the `std::string` behind an optional as ASAN counter checks require
   // that we properly call constructors and destructors for all strings. This is
   // not the case when `FontFaceCreationParams` is used in `HashMap` as key

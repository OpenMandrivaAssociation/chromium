diff -up chromium-93.0.4577.42/chrome/browser/about_flags.cc.22~ chromium-93.0.4577.42/chrome/browser/about_flags.cc
--- chromium-93.0.4577.42/chrome/browser/about_flags.cc.22~	2021-08-12 21:10:08.000000000 +0200
+++ chromium-93.0.4577.42/chrome/browser/about_flags.cc	2021-08-15 05:41:57.783400885 +0200
@@ -3236,7 +3236,7 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(media::kDeprecateLowUsageCodecs)},
 #endif  // defined(OS_CHROMEOS)
 
-#if defined(OS_LINUX)
+#if 0
     {
         "enable-accelerated-video-decode",
         flag_descriptions::kAcceleratedVideoDecodeName,
@@ -3251,7 +3251,7 @@ const FeatureEntry kFeatureEntries[] = {
         "disable-accelerated-video-decode",
         flag_descriptions::kAcceleratedVideoDecodeName,
         flag_descriptions::kAcceleratedVideoDecodeDescription,
-        kOsMac | kOsWin | kOsCrOS | kOsAndroid | kOsLinux,
+        kOsAll,
         SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedVideoDecode),
     },
 #endif  // defined(OS_LINUX)
@@ -3813,10 +3813,10 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kWebXrForceRuntimeDescription, kOsDesktop,
      MULTI_VALUE_TYPE(kWebXrForceRuntimeChoices)},
 #endif  // ENABLE_VR
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if (BUILDFLAG(IS_CHROMEOS_ASH)) || (defined(OS_LINUX) && !defined(OS_ANDROID) && !defined(OS_CHROMEOS))
     {"disable-accelerated-mjpeg-decode",
      flag_descriptions::kAcceleratedMjpegDecodeName,
-     flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsCrOS,
+     flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsCrOS | kOsLinux,
      SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedMjpegDecode)},
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
     {"system-keyboard-lock", flag_descriptions::kSystemKeyboardLockName,
diff -up chromium-93.0.4577.42/chrome/browser/flag_descriptions.cc.22~ chromium-93.0.4577.42/chrome/browser/flag_descriptions.cc
--- chromium-93.0.4577.42/chrome/browser/flag_descriptions.cc.22~	2021-08-12 21:10:09.000000000 +0200
+++ chromium-93.0.4577.42/chrome/browser/flag_descriptions.cc	2021-08-15 05:41:57.784400877 +0200
@@ -4022,7 +4022,7 @@ const char kScreenTimeDescription[] =
 
 // Chrome OS -------------------------------------------------------------------
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if (BUILDFLAG(IS_CHROMEOS_ASH)) || (defined(OS_LINUX) && !defined(OS_ANDROID) && !defined(OS_CHROMEOS))
 
 const char kAccountManagementFlowsV2Name[] =
     "Enable redesign of account management flows";
@@ -4037,6 +4037,12 @@ const char kAcceleratedMjpegDecodeDescri
     "Enable hardware-accelerated mjpeg decode for captured frame where "
     "available.";
 
+#endif
+
+// Chrome OS -------------------------------------------------------------------
+
+#if defined(OS_CHROMEOS)
+
 const char kAllowDisableMouseAccelerationName[] =
     "Allow disabling mouse acceleration";
 const char kAllowDisableMouseAccelerationDescription[] =
diff -up chromium-93.0.4577.42/chrome/browser/flag_descriptions.h.22~ chromium-93.0.4577.42/chrome/browser/flag_descriptions.h
--- chromium-93.0.4577.42/chrome/browser/flag_descriptions.h.22~	2021-08-12 21:10:09.000000000 +0200
+++ chromium-93.0.4577.42/chrome/browser/flag_descriptions.h	2021-08-15 05:41:57.784400877 +0200
@@ -2306,7 +2306,7 @@ extern const char kScreenTimeDescription
 
 // Chrome OS ------------------------------------------------------------------
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if (BUILDFLAG(IS_CHROMEOS_ASH)) || (defined(OS_LINUX) && !defined(OS_ANDROID) && !defined(OS_CHROMEOS))
 
 extern const char kAccountManagementFlowsV2Name[];
 extern const char kAccountManagementFlowsV2Description[];
@@ -2314,6 +2314,12 @@ extern const char kAccountManagementFlow
 extern const char kAcceleratedMjpegDecodeName[];
 extern const char kAcceleratedMjpegDecodeDescription[];
 
+#endif
+
+// Chrome OS ------------------------------------------------------------------
+
+#if defined(OS_CHROMEOS)
+
 extern const char kAllowDisableMouseAccelerationName[];
 extern const char kAllowDisableMouseAccelerationDescription[];
 
diff -up chromium-93.0.4577.42/content/gpu/BUILD.gn.22~ chromium-93.0.4577.42/content/gpu/BUILD.gn
--- chromium-93.0.4577.42/content/gpu/BUILD.gn.22~	2021-08-12 21:10:16.000000000 +0200
+++ chromium-93.0.4577.42/content/gpu/BUILD.gn	2021-08-15 05:41:57.785400869 +0200
@@ -6,6 +6,7 @@ import("//build/config/chromeos/ui_mode.
 import("//build/config/ui.gni")
 import("//gpu/vulkan/features.gni")
 import("//media/media_options.gni")
+import("//media/gpu/args.gni")
 
 # See //content/BUILD.gn for how this works.
 group("gpu") {
@@ -139,4 +140,8 @@ target(link_target_type, "gpu_sources")
       (!is_chromecast || is_cast_desktop_build)) {
     configs += [ "//build/config/linux/dri" ]
   }
+
+  if (is_linux && use_vaapi) {
+    public_configs = [ "//build/config/linux/libva" ]
+  }
 }
diff -up chromium-93.0.4577.42/media/gpu/gpu_video_decode_accelerator_factory.cc.22~ chromium-93.0.4577.42/media/gpu/gpu_video_decode_accelerator_factory.cc
--- chromium-93.0.4577.42/media/gpu/gpu_video_decode_accelerator_factory.cc.22~	2021-08-12 21:10:18.000000000 +0200
+++ chromium-93.0.4577.42/media/gpu/gpu_video_decode_accelerator_factory.cc	2021-08-15 05:41:57.785400869 +0200
@@ -160,6 +160,8 @@ GpuVideoDecodeAcceleratorFactory::Create
     vda = (this->*create_vda_function)(workarounds, gpu_preferences, media_log);
     if (vda && vda->Initialize(config, client))
       return vda;
+    else
+      LOG(ERROR) << "Initialization of one or more VDAs failed.";
   }
 
   return nullptr;
diff -up chromium-93.0.4577.42/media/gpu/ipc/service/gpu_video_decode_accelerator.cc.22~ chromium-93.0.4577.42/media/gpu/ipc/service/gpu_video_decode_accelerator.cc
--- chromium-93.0.4577.42/media/gpu/ipc/service/gpu_video_decode_accelerator.cc.22~	2021-08-12 21:10:18.000000000 +0200
+++ chromium-93.0.4577.42/media/gpu/ipc/service/gpu_video_decode_accelerator.cc	2021-08-15 05:41:57.785400869 +0200
@@ -432,6 +432,7 @@ bool GpuVideoDecodeAccelerator::Initiali
     LOG(ERROR) << "Failed creating the VDA factory";
     return false;
   }
+  LOG(WARNING) << "Created the VDA factory";
 
   const gpu::GpuDriverBugWorkarounds& gpu_workarounds =
       stub_->channel()->gpu_channel_manager()->gpu_driver_bug_workarounds();
diff -up chromium-93.0.4577.42/media/gpu/vaapi/vaapi_wrapper.cc.22~ chromium-93.0.4577.42/media/gpu/vaapi/vaapi_wrapper.cc
--- chromium-93.0.4577.42/media/gpu/vaapi/vaapi_wrapper.cc.22~	2021-08-12 21:10:18.000000000 +0200
+++ chromium-93.0.4577.42/media/gpu/vaapi/vaapi_wrapper.cc	2021-08-15 05:41:57.785400869 +0200
@@ -527,6 +527,11 @@ void VADisplayState::PreSandboxInitializ
       base::File::FLAG_OPEN | base::File::FLAG_READ | base::File::FLAG_WRITE);
   if (drm_file.IsValid())
     VADisplayState::Get()->SetDrmFd(drm_file.GetPlatformFile());
+
+  const char kNvidiaPath[] = "/dev/dri/nvidiactl";
+  base::File nvidia_file = base::File(
+      base::FilePath::FromUTF8Unsafe(kNvidiaPath),
+      base::File::FLAG_OPEN | base::File::FLAG_READ | base::File::FLAG_WRITE);
 }
 
 VADisplayState::VADisplayState()
@@ -634,10 +639,6 @@ bool VADisplayState::InitializeVaDriver_
 }
 
 bool VADisplayState::InitializeOnce() {
-  static_assert(
-      VA_MAJOR_VERSION >= 2 || (VA_MAJOR_VERSION == 1 && VA_MINOR_VERSION >= 1),
-      "Requires VA-API >= 1.1.0");
-
   // Set VA logging level, unless already set.
   constexpr char libva_log_level_env[] = "LIBVA_MESSAGING_LEVEL";
   std::unique_ptr<base::Environment> env(base::Environment::Create());
@@ -658,7 +659,6 @@ bool VADisplayState::InitializeOnce() {
     // https://github.com/intel/media-driver/issues/818
     if (!env->HasVar(libva_driver_impl_env))
       env->SetVar(libva_driver_impl_env, "i965");
-
     // Re-initialize with the new driver.
     va_display_ = nullptr;
     va_initialized_ = false;
@@ -870,7 +870,7 @@ bool AreAttribsSupported(const base::Loc
     if (attribs[i].type != required_attribs[i].type ||
         (attribs[i].value & required_attribs[i].value) !=
             required_attribs[i].value) {
-      DVLOG(1) << "Unsupported value " << required_attribs[i].value << " for "
+      VLOG(1) << "Unsupported value " << required_attribs[i].value << " for "
                << vaConfigAttribTypeStr(required_attribs[i].type);
       return false;
     }

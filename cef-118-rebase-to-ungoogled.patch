diff -up chromium-118.0.5993.70/cef/patch/patches/base_sandbox_2743.patch.omv~ chromium-118.0.5993.70/cef/patch/patches/base_sandbox_2743.patch
--- chromium-118.0.5993.70/cef/patch/patches/base_sandbox_2743.patch.omv~	2023-10-14 06:29:30.541778518 +0200
+++ chromium-118.0.5993.70/cef/patch/patches/base_sandbox_2743.patch	2023-10-14 06:34:15.808594803 +0200
@@ -1,7 +1,6 @@
-diff --git base/BUILD.gn base/BUILD.gn
-index 82cb596dcbb36..16c057933e1f8 100644
---- base/BUILD.gn
-+++ base/BUILD.gn
+diff -up base/BUILD.gn.ung3~ base/BUILD.gn
+--- base/BUILD.gn.ung3~	2023-10-11 03:21:45.732766600 +0200
++++ base/BUILD.gn	2023-10-14 06:34:01.107449504 +0200
 @@ -40,6 +40,7 @@ import("//build/config/ui.gni")
  import("//build/nocompile.gni")
  import("//build/timestamp.gni")
@@ -36,10 +35,9 @@ index 82cb596dcbb36..16c057933e1f8 10064
      libs += [
        "cfgmgr32.lib",
        "ntdll.lib",
-diff --git base/allocator/dispatcher/dispatcher.cc base/allocator/dispatcher/dispatcher.cc
-index 616e2e89af7d3..2a2993e74d53a 100644
---- base/allocator/dispatcher/dispatcher.cc
-+++ base/allocator/dispatcher/dispatcher.cc
+diff -up base/allocator/dispatcher/dispatcher.cc.ung3~ base/allocator/dispatcher/dispatcher.cc
+--- base/allocator/dispatcher/dispatcher.cc.ung3~	2023-10-11 03:21:44.732766600 +0200
++++ base/allocator/dispatcher/dispatcher.cc	2023-10-14 06:34:01.113449564 +0200
 @@ -10,6 +10,7 @@
  #include "base/check.h"
  #include "base/dcheck_is_on.h"
@@ -57,10 +55,9 @@ index 616e2e89af7d3..2a2993e74d53a 10064
      DCHECK([&]() {
        auto const was_set = is_initialized_check_flag_.test_and_set();
        is_initialized_check_flag_.clear();
-diff --git base/hash/md5.h base/hash/md5.h
-index aa889f350e8f7..50acac8a69225 100644
---- base/hash/md5.h
-+++ base/hash/md5.h
+diff -up base/hash/md5.h.ung3~ base/hash/md5.h
+--- base/hash/md5.h.ung3~	2023-10-11 03:21:44.880778000 +0200
++++ base/hash/md5.h	2023-10-14 06:34:01.113449564 +0200
 @@ -10,8 +10,9 @@
  #include "base/base_export.h"
  #include "base/strings/string_piece.h"
@@ -72,10 +69,9 @@ index aa889f350e8f7..50acac8a69225 10064
  #include "base/hash/md5_nacl.h"
  #else
  #include "base/hash/md5_boringssl.h"
-diff --git base/hash/sha1.h base/hash/sha1.h
-index 29626e5853c6e..2fb1c61504c5d 100644
---- base/hash/sha1.h
-+++ base/hash/sha1.h
+diff -up base/hash/sha1.h.ung3~ base/hash/sha1.h
+--- base/hash/sha1.h.ung3~	2023-10-11 03:21:44.880778000 +0200
++++ base/hash/sha1.h	2023-10-14 06:34:01.115449583 +0200
 @@ -14,7 +14,9 @@
  #include "base/containers/span.h"
  #include "base/strings/string_piece.h"
@@ -87,10 +83,9 @@ index 29626e5853c6e..2fb1c61504c5d 10064
  #include "base/hash/sha1_nacl.h"
  #else
  #include "base/hash/sha1_boringssl.h"
-diff --git base/rand_util.h base/rand_util.h
-index c9dd1249660c1..7d68b0d893e3d 100644
---- base/rand_util.h
-+++ base/rand_util.h
+diff -up base/rand_util.h.ung3~ base/rand_util.h
+--- base/rand_util.h.ung3~	2023-10-11 03:21:44.956784000 +0200
++++ base/rand_util.h	2023-10-14 06:34:01.115449583 +0200
 @@ -15,8 +15,9 @@
  #include "base/compiler_specific.h"
  #include "base/gtest_prod_util.h"
@@ -111,10 +106,9 @@ index c9dd1249660c1..7d68b0d893e3d 10064
  class NonAllocatingRandomBitGenerator {
   public:
    using result_type = uint64_t;
-diff --git base/rand_util_win.cc base/rand_util_win.cc
-index 549f4362af8b6..f08b1b2e7f061 100644
---- base/rand_util_win.cc
-+++ base/rand_util_win.cc
+diff -up base/rand_util_win.cc.ung3~ base/rand_util_win.cc
+--- base/rand_util_win.cc.ung3~	2023-10-11 03:21:45.968784800 +0200
++++ base/rand_util_win.cc	2023-10-14 06:34:01.115449583 +0200
 @@ -15,8 +15,12 @@
  
  #include "base/check.h"
@@ -127,7 +121,7 @@ index 549f4362af8b6..f08b1b2e7f061 10064
 +#endif
  
  // Prototype for ProcessPrng.
- // See: https://learn.microsoft.com/en-us/windows/win32/seccng/processprng
+ // See: https://learn.m1cr050ft.qjz9zk/en-us/windows/win32/seccng/processprng
 @@ -28,6 +32,7 @@ namespace base {
  
  namespace internal {
@@ -147,7 +141,7 @@ index 549f4362af8b6..f08b1b2e7f061 10064
  }  // namespace internal
  
  namespace {
-@@ -66,6 +75,7 @@ decltype(&ProcessPrng) GetProcessPrng() {
+@@ -66,6 +75,7 @@ decltype(&ProcessPrng) GetProcessPrng()
  }
  
  void RandBytes(void* output, size_t output_length, bool avoid_allocation) {
@@ -155,7 +149,7 @@ index 549f4362af8b6..f08b1b2e7f061 10064
    if (!avoid_allocation && internal::UseBoringSSLForRandBytes()) {
      // Ensure BoringSSL is initialized so it can use things like RDRAND.
      CRYPTO_library_init();
-@@ -73,6 +83,7 @@ void RandBytes(void* output, size_t output_length, bool avoid_allocation) {
+@@ -73,6 +83,7 @@ void RandBytes(void* output, size_t outp
      (void)RAND_bytes(static_cast<uint8_t*>(output), output_length);
      return;
    }
@@ -163,10 +157,9 @@ index 549f4362af8b6..f08b1b2e7f061 10064
  
    static decltype(&ProcessPrng) process_prng_fn = GetProcessPrng();
    BOOL success = process_prng_fn(static_cast<BYTE*>(output), output_length);
-diff --git base/unguessable_token.cc base/unguessable_token.cc
-index aa7423f88d278..1b2c7d3e3c4a0 100644
---- base/unguessable_token.cc
-+++ base/unguessable_token.cc
+diff -up base/unguessable_token.cc.ung3~ base/unguessable_token.cc
+--- base/unguessable_token.cc.ung3~	2023-10-11 03:21:45.200802800 +0200
++++ base/unguessable_token.cc	2023-10-14 06:34:01.115449583 +0200
 @@ -10,8 +10,9 @@
  #include "base/format_macros.h"
  #include "base/rand_util.h"
@@ -178,7 +171,7 @@ index aa7423f88d278..1b2c7d3e3c4a0 10064
  #include "third_party/boringssl/src/include/openssl/mem.h"
  #endif
  
-@@ -46,7 +47,7 @@ absl::optional<UnguessableToken> UnguessableToken::Deserialize(uint64_t high,
+@@ -46,7 +47,7 @@ absl::optional<UnguessableToken> Unguess
  }
  
  bool UnguessableToken::operator==(const UnguessableToken& other) const {
@@ -187,10 +180,9 @@ index aa7423f88d278..1b2c7d3e3c4a0 10064
    // BoringSSL is unavailable for NaCl builds so it remains timing dependent.
    return token_ == other.token_;
  #else
-diff --git base/win/sid.cc base/win/sid.cc
-index 0f1a2ec79aa4b..7f92778a4a776 100644
---- base/win/sid.cc
-+++ base/win/sid.cc
+diff -up base/win/sid.cc.ung3~ base/win/sid.cc
+--- base/win/sid.cc.ung3~	2023-10-11 03:21:45.224804600 +0200
++++ base/win/sid.cc	2023-10-14 06:34:01.115449583 +0200
 @@ -15,6 +15,7 @@
  #include <utility>
  
@@ -212,7 +204,7 @@ index 0f1a2ec79aa4b..7f92778a4a776 10064
  
  namespace base::win {
  
-@@ -124,6 +129,7 @@ Sid Sid::FromNamedCapability(const std::wstring& capability_name) {
+@@ -124,6 +129,7 @@ Sid Sid::FromNamedCapability(const std::
    if (known_cap != known_capabilities->end()) {
      return FromKnownCapability(known_cap->second);
    }
@@ -220,7 +212,7 @@ index 0f1a2ec79aa4b..7f92778a4a776 10064
    CRYPTO_library_init();
    static_assert((SHA256_DIGEST_LENGTH / sizeof(DWORD)) ==
                  SECURITY_APP_PACKAGE_RID_COUNT);
-@@ -136,6 +142,10 @@ Sid Sid::FromNamedCapability(const std::wstring& capability_name) {
+@@ -136,6 +142,10 @@ Sid Sid::FromNamedCapability(const std::
           reinterpret_cast<uint8_t*>(&rids[2]));
    return FromSubAuthorities(SECURITY_APP_PACKAGE_AUTHORITY, std::size(rids),
                              rids);
diff -up chromium-118.0.5993.70/cef/patch/patches/chrome_runtime_views.patch.omv~ chromium-118.0.5993.70/cef/patch/patches/chrome_runtime_views.patch
--- chromium-118.0.5993.70/cef/patch/patches/chrome_runtime_views.patch.omv~	2023-10-14 06:29:41.791889436 +0200
+++ chromium-118.0.5993.70/cef/patch/patches/chrome_runtime_views.patch	2023-10-14 06:32:46.724714578 +0200
@@ -1,8 +1,7 @@
-diff --git chrome/browser/ui/browser_command_controller.cc chrome/browser/ui/browser_command_controller.cc
-index db31ee0b50746..2f3aebdcb6101 100644
---- chrome/browser/ui/browser_command_controller.cc
-+++ chrome/browser/ui/browser_command_controller.cc
-@@ -401,6 +401,7 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+diff -up chrome/browser/ui/browser_command_controller.cc.ung1~ chrome/browser/ui/browser_command_controller.cc
+--- chrome/browser/ui/browser_command_controller.cc.ung1~	2023-10-14 06:25:17.778281225 +0200
++++ chrome/browser/ui/browser_command_controller.cc	2023-10-14 06:30:22.163287582 +0200
+@@ -400,6 +400,7 @@ bool BrowserCommandController::ExecuteCo
    // choose to not implement CommandUpdaterDelegate inside this class and
    // therefore command_updater_ doesn't have the delegate set).
    if (!SupportsCommand(id) || !IsCommandEnabled(id)) {
@@ -10,7 +9,7 @@ index db31ee0b50746..2f3aebdcb6101 10064
      return false;
    }
  
-@@ -417,6 +418,13 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+@@ -416,6 +417,13 @@ bool BrowserCommandController::ExecuteCo
    DCHECK(command_updater_.IsCommandEnabled(id))
        << "Invalid/disabled command " << id;
  
@@ -24,7 +23,7 @@ index db31ee0b50746..2f3aebdcb6101 10064
    // The order of commands in this switch statement must match the function
    // declaration order in browser.h!
    switch (id) {
-@@ -1148,11 +1156,13 @@ void BrowserCommandController::TabRestoreServiceLoaded(
+@@ -1147,11 +1155,13 @@ void BrowserCommandController::TabRestor
  // BrowserCommandController, private:
  
  bool BrowserCommandController::IsShowingMainUI() {
@@ -40,11 +39,10 @@ index db31ee0b50746..2f3aebdcb6101 10064
  }
  
  bool BrowserCommandController::IsWebAppOrCustomTab() const {
-diff --git chrome/browser/ui/toolbar/app_menu_model.cc chrome/browser/ui/toolbar/app_menu_model.cc
-index 1edfddc63af51..d4ee5f2c93cc0 100644
---- chrome/browser/ui/toolbar/app_menu_model.cc
-+++ chrome/browser/ui/toolbar/app_menu_model.cc
-@@ -590,6 +590,57 @@ SaveAndShareSubMenuModel::SaveAndShareSubMenuModel(
+diff -up chrome/browser/ui/toolbar/app_menu_model.cc.ung1~ chrome/browser/ui/toolbar/app_menu_model.cc
+--- chrome/browser/ui/toolbar/app_menu_model.cc.ung1~	2023-10-14 06:25:16.731280764 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.cc	2023-10-14 06:30:22.165287602 +0200
+@@ -535,6 +535,57 @@ SaveAndShareSubMenuModel::SaveAndShareSu
    }
  }
  
@@ -102,7 +100,7 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
  }  // namespace
  
  ////////////////////////////////////////////////////////////////////////////////
-@@ -1385,7 +1436,7 @@ bool AppMenuModel::IsCommandIdChecked(int command_id) const {
+@@ -1320,7 +1371,7 @@ bool AppMenuModel::IsCommandIdChecked(in
    return false;
  }
  
@@ -111,7 +109,7 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
    GlobalError* error =
        GlobalErrorServiceFactory::GetForProfile(browser_->profile())
            ->GetGlobalErrorByMenuItemCommandID(command_id);
-@@ -1400,6 +1451,30 @@ bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
+@@ -1335,6 +1386,30 @@ bool AppMenuModel::IsCommandIdEnabled(in
    }
  }
  
@@ -142,7 +140,7 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
  bool AppMenuModel::IsCommandIdAlerted(int command_id) const {
    if ((command_id == IDC_RECENT_TABS_MENU) ||
        (command_id == AppMenuModel::kMinRecentTabsCommandId)) {
-@@ -1570,11 +1645,15 @@ void AppMenuModel::Build() {
+@@ -1505,11 +1580,15 @@ void AppMenuModel::Build() {
                                         kDefaultIconSize));
    }
  
@@ -163,7 +161,7 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
  
    AddItemWithStringId(IDC_PRINT, IDS_PRINT);
  
-@@ -1655,9 +1734,13 @@ void AppMenuModel::Build() {
+@@ -1590,9 +1669,13 @@ void AppMenuModel::Build() {
                           kMoreToolsMenuItem);
  
    if (!features::IsChromeRefresh2023()) {
@@ -180,7 +178,7 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
    }
  
    if (!features::IsChromeRefresh2023()) {
-@@ -1739,6 +1822,11 @@ void AppMenuModel::Build() {
+@@ -1674,6 +1757,11 @@ void AppMenuModel::Build() {
      SetCommandIcon(this, IDC_EXIT, kExitMenuIcon);
    }
  
@@ -192,11 +190,10 @@ index 1edfddc63af51..d4ee5f2c93cc0 10064
    uma_action_recorded_ = false;
  }
  
-diff --git chrome/browser/ui/toolbar/app_menu_model.h chrome/browser/ui/toolbar/app_menu_model.h
-index f06cf1bf08ba4..4e89b522715fc 100644
---- chrome/browser/ui/toolbar/app_menu_model.h
-+++ chrome/browser/ui/toolbar/app_menu_model.h
-@@ -204,6 +204,7 @@ class AppMenuModel : public ui::SimpleMenuModel,
+diff -up chrome/browser/ui/toolbar/app_menu_model.h.ung1~ chrome/browser/ui/toolbar/app_menu_model.h
+--- chrome/browser/ui/toolbar/app_menu_model.h.ung1~	2023-10-11 03:21:54.641533600 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.h	2023-10-14 06:30:22.165287602 +0200
+@@ -204,6 +204,7 @@ class AppMenuModel : public ui::SimpleMe
    void ExecuteCommand(int command_id, int event_flags) override;
    bool IsCommandIdChecked(int command_id) const override;
    bool IsCommandIdEnabled(int command_id) const override;
@@ -204,7 +201,7 @@ index f06cf1bf08ba4..4e89b522715fc 10064
    bool IsCommandIdAlerted(int command_id) const override;
    bool GetAcceleratorForCommandId(int command_id,
                                    ui::Accelerator* accelerator) const override;
-@@ -236,6 +237,8 @@ class AppMenuModel : public ui::SimpleMenuModel,
+@@ -236,6 +237,8 @@ class AppMenuModel : public ui::SimpleMe
    // took to select the command.
    void LogMenuMetrics(int command_id);
  
@@ -213,11 +210,10 @@ index f06cf1bf08ba4..4e89b522715fc 10064
   private:
    // Adds actionable global error menu items to the menu.
    // Examples: Extension permissions and sign in errors.
-diff --git chrome/browser/ui/views/find_bar_host.cc chrome/browser/ui/views/find_bar_host.cc
-index 59024587ef6b7..0c30aa71768cf 100644
---- chrome/browser/ui/views/find_bar_host.cc
-+++ chrome/browser/ui/views/find_bar_host.cc
-@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::Rect* bounds) {
+diff -up chrome/browser/ui/views/find_bar_host.cc.ung1~ chrome/browser/ui/views/find_bar_host.cc
+--- chrome/browser/ui/views/find_bar_host.cc.ung1~	2023-10-11 03:21:54.737541200 +0200
++++ chrome/browser/ui/views/find_bar_host.cc	2023-10-14 06:30:22.165287602 +0200
+@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::R
    // The BrowserView does Layout for the components that we care about
    // positioning relative to, so we ask it to tell us where we should go.
    *bounds = browser_view()->GetFindBarBoundingBox();
@@ -230,11 +226,10 @@ index 59024587ef6b7..0c30aa71768cf 10064
  }
  
  void FindBarHost::RegisterAccelerators() {
-diff --git chrome/browser/ui/views/frame/browser_frame.cc chrome/browser/ui/views/frame/browser_frame.cc
-index bb4b3821bcfda..9734fe4aaffcf 100644
---- chrome/browser/ui/views/frame/browser_frame.cc
-+++ chrome/browser/ui/views/frame/browser_frame.cc
-@@ -114,15 +114,23 @@ ui::ColorProviderKey::SchemeVariant GetSchemeVariant(
+diff -up chrome/browser/ui/views/frame/browser_frame.cc.ung1~ chrome/browser/ui/views/frame/browser_frame.cc
+--- chrome/browser/ui/views/frame/browser_frame.cc.ung1~	2023-10-14 06:25:16.868282109 +0200
++++ chrome/browser/ui/views/frame/browser_frame.cc	2023-10-14 06:31:13.577794883 +0200
+@@ -114,15 +114,23 @@ ui::ColorProviderKey::SchemeVariant GetS
  ////////////////////////////////////////////////////////////////////////////////
  // BrowserFrame, public:
  
@@ -260,7 +255,7 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
  }
  
  BrowserFrame::~BrowserFrame() {}
-@@ -228,6 +236,12 @@ void BrowserFrame::LayoutWebAppWindowTitle(
+@@ -228,6 +236,12 @@ void BrowserFrame::LayoutWebAppWindowTit
  }
  
  int BrowserFrame::GetTopInset() const {
@@ -273,7 +268,7 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
    return browser_frame_view_->GetTopInset(false);
  }
  
-@@ -240,6 +254,8 @@ BrowserNonClientFrameView* BrowserFrame::GetFrameView() const {
+@@ -240,6 +254,8 @@ BrowserNonClientFrameView* BrowserFrame:
  }
  
  bool BrowserFrame::UseCustomFrame() const {
@@ -282,7 +277,7 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
    return native_browser_frame_->UseCustomFrame();
  }
  
-@@ -253,20 +269,30 @@ bool BrowserFrame::ShouldDrawFrameHeader() const {
+@@ -253,20 +269,30 @@ bool BrowserFrame::ShouldDrawFrameHeader
  
  void BrowserFrame::GetWindowPlacement(gfx::Rect* bounds,
                                        ui::WindowShowState* show_state) const {
@@ -313,7 +308,7 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
    browser_frame_view_->OnBrowserViewInitViewsComplete();
  }
  
-@@ -367,6 +393,8 @@ ui::ColorProviderKey::ThemeInitializerSupplier* BrowserFrame::GetCustomTheme()
+@@ -367,6 +393,8 @@ ui::ColorProviderKey::ThemeInitializerSu
  }
  
  void BrowserFrame::OnNativeWidgetWorkspaceChanged() {
@@ -322,7 +317,7 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
    chrome::SaveWindowWorkspace(browser_view_->browser(), GetWorkspace());
    chrome::SaveWindowVisibleOnAllWorkspaces(browser_view_->browser(),
                                             IsVisibleOnAllWorkspaces());
-@@ -478,6 +506,8 @@ void BrowserFrame::OnNativeThemeUpdated(ui::NativeTheme* observed_theme) {
+@@ -478,6 +506,8 @@ void BrowserFrame::OnNativeThemeUpdated(
  
  ui::ColorProviderKey BrowserFrame::GetColorProviderKey() const {
    auto key = Widget::GetColorProviderKey();
@@ -331,19 +326,19 @@ index bb4b3821bcfda..9734fe4aaffcf 10064
  
    key.app_controller = browser_view_->browser()->app_controller();
  
-@@ -632,5 +662,8 @@ bool BrowserFrame::RegenerateFrameOnThemeChange(
+@@ -632,6 +662,9 @@ bool BrowserFrame::RegenerateFrameOnThem
  }
  
  bool BrowserFrame::IsIncognitoBrowser() const {
 +  if (!browser_view_) {
 +    return true;
 +  }
+   if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
+     return false;
    return browser_view_->browser()->profile()->IsIncognitoProfile();
- }
-diff --git chrome/browser/ui/views/frame/browser_frame.h chrome/browser/ui/views/frame/browser_frame.h
-index 0c231b6ac5b01..6b5af98e18e42 100644
---- chrome/browser/ui/views/frame/browser_frame.h
-+++ chrome/browser/ui/views/frame/browser_frame.h
+diff -up chrome/browser/ui/views/frame/browser_frame.h.ung1~ chrome/browser/ui/views/frame/browser_frame.h
+--- chrome/browser/ui/views/frame/browser_frame.h.ung1~	2023-10-11 03:21:54.741541400 +0200
++++ chrome/browser/ui/views/frame/browser_frame.h	2023-10-14 06:30:22.166287612 +0200
 @@ -61,7 +61,9 @@ enum class TabDragKind {
  // This is a virtual interface that allows system specific browser frames.
  class BrowserFrame : public views::Widget, public views::ContextMenuController {
@@ -354,10 +349,9 @@ index 0c231b6ac5b01..6b5af98e18e42 10064
  
    BrowserFrame(const BrowserFrame&) = delete;
    BrowserFrame& operator=(const BrowserFrame&) = delete;
-diff --git chrome/browser/ui/views/frame/browser_view.cc chrome/browser/ui/views/frame/browser_view.cc
-index 2c4cb9a1e892c..b7336650fc418 100644
---- chrome/browser/ui/views/frame/browser_view.cc
-+++ chrome/browser/ui/views/frame/browser_view.cc
+diff -up chrome/browser/ui/views/frame/browser_view.cc.ung1~ chrome/browser/ui/views/frame/browser_view.cc
+--- chrome/browser/ui/views/frame/browser_view.cc.ung1~	2023-10-14 06:25:16.861282040 +0200
++++ chrome/browser/ui/views/frame/browser_view.cc	2023-10-14 06:30:22.168287632 +0200
 @@ -338,11 +338,10 @@ using content::NativeWebKeyboardEvent;
  using content::WebContents;
  using web_modal::WebContentsModalDialogHost;
@@ -373,7 +367,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  
  #if BUILDFLAG(IS_CHROMEOS_ASH)
  // UMA histograms that record animation smoothness for tab loading animation.
-@@ -838,11 +837,22 @@ class BrowserView::AccessibilityModeObserver : public ui::AXModeObserver {
+@@ -838,11 +837,22 @@ class BrowserView::AccessibilityModeObse
  ///////////////////////////////////////////////////////////////////////////////
  // BrowserView, public:
  
@@ -397,7 +391,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    SetShowIcon(
        ::ShouldShowWindowIcon(browser_.get(), AppUsesWindowControlsOverlay()));
  
-@@ -888,7 +898,6 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -888,7 +898,6 @@ BrowserView::BrowserView(std::unique_ptr
    }
  
    browser_->tab_strip_model()->AddObserver(this);
@@ -405,7 +399,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  
    // Top container holds tab strip region and toolbar and lives at the front of
    // the view hierarchy.
-@@ -944,8 +953,15 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -944,8 +953,15 @@ BrowserView::BrowserView(std::unique_ptr
    contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
        devtools_web_view_, contents_web_view_));
  
@@ -423,7 +417,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  
    contents_separator_ =
        top_container_->AddChildView(std::make_unique<ContentsSeparator>());
-@@ -1147,12 +1163,14 @@ gfx::Size BrowserView::GetWebAppFrameToolbarPreferredSize() const {
+@@ -1147,12 +1163,14 @@ gfx::Size BrowserView::GetWebAppFrameToo
  
  #if BUILDFLAG(IS_MAC)
  bool BrowserView::UsesImmersiveFullscreenMode() const {
@@ -440,7 +434,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  }
  
  bool BrowserView::UsesImmersiveFullscreenTabbedMode() const {
-@@ -1914,6 +1932,8 @@ bool BrowserView::ShouldHideUIForFullscreen() const {
+@@ -1918,6 +1936,8 @@ bool BrowserView::ShouldHideUIForFullscr
    if (immersive_mode_controller_->IsEnabled())
      return false;
  
@@ -449,7 +443,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    return frame_->GetFrameView()->ShouldHideTopUIForFullscreen();
  }
  
-@@ -2921,7 +2941,8 @@ DownloadShelf* BrowserView::GetDownloadShelf() {
+@@ -2925,7 +2945,8 @@ DownloadShelf* BrowserView::GetDownloadS
  }
  
  DownloadBubbleUIController* BrowserView::GetDownloadBubbleUIController() {
@@ -459,7 +453,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    if (auto* download_button = toolbar_button_provider_->GetDownloadButton())
      return download_button->bubble_controller();
    return nullptr;
-@@ -3454,7 +3475,8 @@ void BrowserView::ReparentTopContainerForEndOfImmersive() {
+@@ -3458,7 +3479,8 @@ void BrowserView::ReparentTopContainerFo
    if (top_container()->parent() == this)
      return;
  
@@ -469,7 +463,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    top_container()->DestroyLayer();
    AddChildViewAt(top_container(), 0);
    EnsureFocusOrder();
-@@ -3904,11 +3926,38 @@ void BrowserView::GetAccessiblePanes(std::vector<views::View*>* panes) {
+@@ -3908,11 +3930,38 @@ void BrowserView::GetAccessiblePanes(std
  bool BrowserView::ShouldDescendIntoChildForEventHandling(
      gfx::NativeView child,
      const gfx::Point& location) {
@@ -510,7 +504,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
      // Draggable regions are defined relative to the web contents.
      gfx::Point point_in_contents_web_view_coords(location);
      views::View::ConvertPointToTarget(GetWidget()->GetRootView(),
-@@ -3917,7 +3966,7 @@ bool BrowserView::ShouldDescendIntoChildForEventHandling(
+@@ -3921,7 +3970,7 @@ bool BrowserView::ShouldDescendIntoChild
  
      // Draggable regions should be ignored for clicks into any browser view's
      // owned widgets, for example alerts, permission prompts or find bar.
@@ -519,7 +513,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
                 point_in_contents_web_view_coords.x(),
                 point_in_contents_web_view_coords.y()) ||
             WidgetOwnedByAnchorContainsPoint(point_in_contents_web_view_coords);
-@@ -4025,8 +4074,10 @@ void BrowserView::Layout() {
+@@ -4029,8 +4078,10 @@ void BrowserView::Layout() {
  
    // TODO(jamescook): Why was this in the middle of layout code?
    toolbar_->location_bar()->omnibox_view()->SetFocusBehavior(
@@ -532,7 +526,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  
  #if BUILDFLAG(IS_CHROMEOS_ASH)
    // In chromeOS ash we round the bottom two corners of the browser frame by
-@@ -4104,6 +4155,11 @@ void BrowserView::AddedToWidget() {
+@@ -4108,6 +4159,11 @@ void BrowserView::AddedToWidget() {
    SetThemeProfileForWindow(GetNativeWindow(), browser_->profile());
  #endif
  
@@ -544,7 +538,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    toolbar_->Init();
  
    // TODO(pbos): Investigate whether the side panels should be creatable when
-@@ -4152,13 +4208,9 @@ void BrowserView::AddedToWidget() {
+@@ -4156,13 +4212,9 @@ void BrowserView::AddedToWidget() {
  
    EnsureFocusOrder();
  
@@ -560,7 +554,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    using_native_frame_ = frame_->ShouldUseNativeFrame();
  
    MaybeInitializeWebUITabStrip();
-@@ -4571,7 +4623,8 @@ void BrowserView::ProcessFullscreen(bool fullscreen,
+@@ -4575,7 +4627,8 @@ void BrowserView::ProcessFullscreen(bool
    // Undo our anti-jankiness hacks and force a re-layout.
    in_process_fullscreen_ = false;
    ToolbarSizeChanged(false);
@@ -570,7 +564,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
  }
  
  bool BrowserView::ShouldUseImmersiveFullscreenForUrl(const GURL& url) const {
-@@ -4942,6 +4995,8 @@ Profile* BrowserView::GetProfile() {
+@@ -4946,6 +4999,8 @@ Profile* BrowserView::GetProfile() {
  }
  
  void BrowserView::UpdateUIForTabFullscreen() {
@@ -579,7 +573,7 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    frame()->GetFrameView()->UpdateFullscreenTopUI();
  }
  
-@@ -4964,6 +5019,8 @@ void BrowserView::HideDownloadShelf() {
+@@ -4968,6 +5023,8 @@ void BrowserView::HideDownloadShelf() {
  }
  
  bool BrowserView::CanUserExitFullscreen() const {
@@ -588,11 +582,10 @@ index 2c4cb9a1e892c..b7336650fc418 10064
    return frame_->GetFrameView()->CanUserExitFullscreen();
  }
  
-diff --git chrome/browser/ui/views/frame/browser_view.h chrome/browser/ui/views/frame/browser_view.h
-index 8d0b8e65bb269..35cee8880bb31 100644
---- chrome/browser/ui/views/frame/browser_view.h
-+++ chrome/browser/ui/views/frame/browser_view.h
-@@ -136,11 +136,16 @@ class BrowserView : public BrowserWindow,
+diff -up chrome/browser/ui/views/frame/browser_view.h.ung1~ chrome/browser/ui/views/frame/browser_view.h
+--- chrome/browser/ui/views/frame/browser_view.h.ung1~	2023-10-11 03:21:55.749542000 +0200
++++ chrome/browser/ui/views/frame/browser_view.h	2023-10-14 06:30:22.169287641 +0200
+@@ -136,11 +136,16 @@ class BrowserView : public BrowserWindow
      kUnknown
    };
  
@@ -609,7 +602,7 @@ index 8d0b8e65bb269..35cee8880bb31 10064
    void set_frame(BrowserFrame* frame) {
      frame_ = frame;
      paint_as_active_subscription_ =
-@@ -819,6 +824,9 @@ class BrowserView : public BrowserWindow,
+@@ -819,6 +824,9 @@ class BrowserView : public BrowserWindow
    // TopContainerBackground::PaintThemeCustomImage for details.
    gfx::Point GetThemeOffsetFromBrowserView() const;
  
@@ -619,10 +612,9 @@ index 8d0b8e65bb269..35cee8880bb31 10064
   private:
    // Do not friend BrowserViewLayout. Use the BrowserViewLayoutDelegate
    // interface to keep these two classes decoupled and testable.
-diff --git chrome/browser/ui/views/frame/browser_view_layout.cc chrome/browser/ui/views/frame/browser_view_layout.cc
-index 36831f71eeb95..24e0f9e70781b 100644
---- chrome/browser/ui/views/frame/browser_view_layout.cc
-+++ chrome/browser/ui/views/frame/browser_view_layout.cc
+diff -up chrome/browser/ui/views/frame/browser_view_layout.cc.ung1~ chrome/browser/ui/views/frame/browser_view_layout.cc
+--- chrome/browser/ui/views/frame/browser_view_layout.cc.ung1~	2023-10-11 03:21:54.749542000 +0200
++++ chrome/browser/ui/views/frame/browser_view_layout.cc	2023-10-14 06:30:22.169287641 +0200
 @@ -48,6 +48,10 @@
  #include "ui/views/window/client_view.h"
  #include "ui/views/window/hit_test_utils.h"
@@ -634,7 +626,7 @@ index 36831f71eeb95..24e0f9e70781b 10064
  using views::View;
  using web_modal::ModalDialogHostObserver;
  using web_modal::WebContentsModalDialogHost;
-@@ -578,6 +582,13 @@ int BrowserViewLayout::LayoutWebUITabStrip(int top) {
+@@ -578,6 +582,13 @@ int BrowserViewLayout::LayoutWebUITabStr
  
  int BrowserViewLayout::LayoutToolbar(int top) {
    TRACE_EVENT0("ui", "BrowserViewLayout::LayoutToolbar");
@@ -648,10 +640,9 @@ index 36831f71eeb95..24e0f9e70781b 10064
    int browser_view_width = vertical_layout_rect_.width();
    bool toolbar_visible = delegate_->IsToolbarVisible();
    int height = toolbar_visible ? toolbar_->GetPreferredSize().height() : 0;
-diff --git chrome/browser/ui/views/frame/contents_web_view.cc chrome/browser/ui/views/frame/contents_web_view.cc
-index 8267a265a8e10..ee08f18e96a34 100644
---- chrome/browser/ui/views/frame/contents_web_view.cc
-+++ chrome/browser/ui/views/frame/contents_web_view.cc
+diff -up chrome/browser/ui/views/frame/contents_web_view.cc.ung1~ chrome/browser/ui/views/frame/contents_web_view.cc
+--- chrome/browser/ui/views/frame/contents_web_view.cc.ung1~	2023-10-11 03:21:54.753542400 +0200
++++ chrome/browser/ui/views/frame/contents_web_view.cc	2023-10-14 06:30:22.169287641 +0200
 @@ -23,6 +23,11 @@
  ContentsWebView::ContentsWebView(content::BrowserContext* browser_context)
      : views::WebView(browser_context),
@@ -664,11 +655,10 @@ index 8267a265a8e10..ee08f18e96a34 10064
  }
  
  ContentsWebView::~ContentsWebView() {
-diff --git chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
-index f1d303e9b7fd8..8a5935e8f10da 100644
---- chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
-+++ chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
-@@ -549,6 +549,11 @@ PictureInPictureBrowserFrameView::PictureInPictureBrowserFrameView(
+diff -up chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc.ung1~ chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
+--- chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc.ung1~	2023-10-11 03:21:54.757542600 +0200
++++ chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc	2023-10-14 06:30:22.169287641 +0200
+@@ -549,6 +549,11 @@ PictureInPictureBrowserFrameView::Pictur
    frame->GetNativeWindow()->SetEventTargeter(
        std::make_unique<chromeos::InteriorResizeHandleTargeter>());
  #endif
@@ -680,7 +670,7 @@ index f1d303e9b7fd8..8a5935e8f10da 10064
  }
  
  PictureInPictureBrowserFrameView::~PictureInPictureBrowserFrameView() {
-@@ -644,17 +649,20 @@ gfx::Rect PictureInPictureBrowserFrameView::GetWindowBoundsForClientBounds(
+@@ -644,17 +649,20 @@ gfx::Rect PictureInPictureBrowserFrameVi
  
  int PictureInPictureBrowserFrameView::NonClientHitTest(
      const gfx::Point& point) {
@@ -710,7 +700,7 @@ index f1d303e9b7fd8..8a5935e8f10da 10064
    }
  
    // Allow dragging and resizing the window.
-@@ -664,6 +672,27 @@ int PictureInPictureBrowserFrameView::NonClientHitTest(
+@@ -664,6 +672,27 @@ int PictureInPictureBrowserFrameView::No
    if (window_component != HTNOWHERE)
      return window_component;
  
@@ -738,7 +728,7 @@ index f1d303e9b7fd8..8a5935e8f10da 10064
    // Allow interacting with the web contents.
    int frame_component = frame()->client_view()->NonClientHitTest(point);
    if (frame_component != HTNOWHERE)
-@@ -722,7 +751,8 @@ void PictureInPictureBrowserFrameView::Layout() {
+@@ -722,7 +751,8 @@ void PictureInPictureBrowserFrameView::L
    gfx::Rect content_area = GetLocalBounds();
    content_area.Inset(FrameBorderInsets());
    gfx::Rect top_bar = content_area;
@@ -748,7 +738,7 @@ index f1d303e9b7fd8..8a5935e8f10da 10064
    top_bar_container_view_->SetBoundsRect(top_bar);
  #if !BUILDFLAG(IS_ANDROID)
    if (auto_pip_setting_overlay_) {
-@@ -1171,7 +1201,8 @@ gfx::Insets PictureInPictureBrowserFrameView::ResizeBorderInsets() const {
+@@ -1171,7 +1201,8 @@ gfx::Insets PictureInPictureBrowserFrame
  }
  
  int PictureInPictureBrowserFrameView::GetTopAreaHeight() const {
@@ -758,11 +748,10 @@ index f1d303e9b7fd8..8a5935e8f10da 10064
  }
  
  gfx::Size PictureInPictureBrowserFrameView::GetNonClientViewAreaSize() const {
-diff --git chrome/browser/ui/views/page_action/page_action_icon_controller.cc chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-index 723a2840bd988..975152c988917 100644
---- chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-+++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-@@ -96,6 +96,12 @@ void PageActionIconController::Init(const PageActionIconParams& params,
+diff -up chrome/browser/ui/views/page_action/page_action_icon_controller.cc.ung1~ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
+--- chrome/browser/ui/views/page_action/page_action_icon_controller.cc.ung1~	2023-10-11 03:21:54.801546000 +0200
++++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc	2023-10-14 06:30:22.171287661 +0200
+@@ -96,6 +96,12 @@ void PageActionIconController::Init(cons
    };
  
    for (PageActionIconType type : params.types_enabled) {
@@ -775,11 +764,10 @@ index 723a2840bd988..975152c988917 10064
      switch (type) {
        case PageActionIconType::kPaymentsOfferNotification:
          add_page_action_icon(
-diff --git chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-index 734c741d1f2fa..739b468cfc0d8 100644
---- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-+++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-@@ -560,29 +560,41 @@ gfx::Range BrowserTabStripController::ListTabsInGroup(
+diff -up chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.ung1~ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+--- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.ung1~	2023-10-11 03:21:54.885552600 +0200
++++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc	2023-10-14 06:30:22.171287661 +0200
+@@ -560,29 +560,41 @@ gfx::Range BrowserTabStripController::Li
  }
  
  bool BrowserTabStripController::IsFrameCondensed() const {
@@ -821,11 +809,10 @@ index 734c741d1f2fa..739b468cfc0d8 10064
    return GetFrameView()->GetCustomBackgroundId(active_state);
  }
  
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.cc chrome/browser/ui/views/toolbar/toolbar_view.cc
-index 2ea09fd7e8cc0..d5afd2bcb0e3c 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.cc
-+++ chrome/browser/ui/views/toolbar/toolbar_view.cc
-@@ -183,7 +183,7 @@ class TabstripLikeBackground : public views::Background {
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.cc.ung1~ chrome/browser/ui/views/toolbar/toolbar_view.cc
+--- chrome/browser/ui/views/toolbar/toolbar_view.cc.ung1~	2023-10-14 06:25:16.844281873 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.cc	2023-10-14 06:32:20.470455279 +0200
+@@ -183,7 +183,7 @@ class TabstripLikeBackground : public vi
    void Paint(gfx::Canvas* canvas, views::View* view) const override {
      bool painted = TopContainerBackground::PaintThemeCustomImage(canvas, view,
                                                                   browser_view_);
@@ -834,7 +821,7 @@ index 2ea09fd7e8cc0..d5afd2bcb0e3c 10064
        SkColor frame_color =
            browser_view_->frame()->GetFrameView()->GetFrameColor(
                BrowserFrameActiveState::kUseCurrent);
-@@ -208,12 +208,13 @@ class ToolbarView::ContainerView : public views::View {
+@@ -208,12 +208,13 @@ class ToolbarView::ContainerView : publi
  ////////////////////////////////////////////////////////////////////////////////
  // ToolbarView, public:
  
@@ -912,16 +899,15 @@ index 2ea09fd7e8cc0..d5afd2bcb0e3c 10064
  
    std::unique_ptr<SidePanelToolbarButton> side_panel_button;
    std::unique_ptr<SidePanelToolbarContainer> side_panel_toolbar_container;
--  if (browser_view_->unified_side_panel()) {
-+  if (browser_view_->unified_side_panel() && BUTTON_VISIBLE(kSidePanel)) {
+-  if (browser_view_->unified_side_panel() &&
++  if (browser_view_->unified_side_panel() && BUTTON_VISIBLE(kSidePanel) &&
+       !base::CommandLine::ForCurrentProcess()->HasSwitch("hide-sidepanel-button")) {
      if (companion::IsCompanionFeatureEnabled()) {
        side_panel_toolbar_container =
-           std::make_unique<SidePanelToolbarContainer>(browser_view_);
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.h chrome/browser/ui/views/toolbar/toolbar_view.h
-index be3bd96444563..96669547e3ccf 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.h
-+++ chrome/browser/ui/views/toolbar/toolbar_view.h
-@@ -89,7 +89,8 @@ class ToolbarView : public views::AccessiblePaneView,
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.h.ung1~ chrome/browser/ui/views/toolbar/toolbar_view.h
+--- chrome/browser/ui/views/toolbar/toolbar_view.h.ung1~	2023-10-11 03:21:54.925555700 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.h	2023-10-14 06:30:22.171287661 +0200
+@@ -89,7 +89,8 @@ class ToolbarView : public views::Access
                  // needs to be displayed.
    };
  
@@ -931,10 +917,9 @@ index be3bd96444563..96669547e3ccf 10064
    ToolbarView(const ToolbarView&) = delete;
    ToolbarView& operator=(const ToolbarView&) = delete;
    ~ToolbarView() override;
-diff --git chrome/browser/ui/web_applications/draggable_region_host_impl.cc chrome/browser/ui/web_applications/draggable_region_host_impl.cc
-index 460a2b08f964b..cb1b67d8b1213 100644
---- chrome/browser/ui/web_applications/draggable_region_host_impl.cc
-+++ chrome/browser/ui/web_applications/draggable_region_host_impl.cc
+diff -up chrome/browser/ui/web_applications/draggable_region_host_impl.cc.ung1~ chrome/browser/ui/web_applications/draggable_region_host_impl.cc
+--- chrome/browser/ui/web_applications/draggable_region_host_impl.cc.ung1~	2023-10-11 03:21:54.953558000 +0200
++++ chrome/browser/ui/web_applications/draggable_region_host_impl.cc	2023-10-14 06:30:22.171287661 +0200
 @@ -11,6 +11,24 @@
  #include "chrome/common/chrome_features.h"
  #include "mojo/public/cpp/bindings/self_owned_receiver.h"
@@ -960,7 +945,7 @@ index 460a2b08f964b..cb1b67d8b1213 10064
  DraggableRegionsHostImpl::DraggableRegionsHostImpl(
      content::RenderFrameHost& render_frame_host,
      mojo::PendingReceiver<chrome::mojom::DraggableRegions> receiver)
-@@ -28,7 +46,7 @@ void DraggableRegionsHostImpl::CreateIfAllowed(
+@@ -28,7 +46,7 @@ void DraggableRegionsHostImpl::CreateIfA
    auto* browser = chrome::FindBrowserWithWebContents(web_contents);
  
    // We only want to bind the receiver for PWAs.
@@ -969,7 +954,7 @@ index 460a2b08f964b..cb1b67d8b1213 10064
      return;
  
    // The object is bound to the lifetime of |render_frame_host| and the mojo
-@@ -43,7 +61,7 @@ void DraggableRegionsHostImpl::UpdateDraggableRegions(
+@@ -43,7 +61,7 @@ void DraggableRegionsHostImpl::UpdateDra
    auto* browser = chrome::FindBrowserWithWebContents(web_contents);
    // When a WebApp browser's WebContents is reparented to a tabbed browser, a
    // draggable regions update may race with the reparenting logic.
@@ -978,7 +963,7 @@ index 460a2b08f964b..cb1b67d8b1213 10064
      return;
  
    SkRegion sk_region;
-@@ -56,5 +74,12 @@ void DraggableRegionsHostImpl::UpdateDraggableRegions(
+@@ -56,5 +74,12 @@ void DraggableRegionsHostImpl::UpdateDra
    }
  
    auto* app_browser_controller = browser->app_controller();
diff -up chromium-118.0.5993.70/cef/patch/patches/content_2015.patch.omv~ chromium-118.0.5993.70/cef/patch/patches/content_2015.patch
--- chromium-118.0.5993.70/cef/patch/patches/content_2015.patch.omv~	2023-10-14 06:29:22.372697987 +0200
+++ chromium-118.0.5993.70/cef/patch/patches/content_2015.patch	2023-10-14 06:33:34.389185473 +0200
@@ -1,7 +1,6 @@
-diff --git content/browser/devtools/devtools_http_handler.cc content/browser/devtools/devtools_http_handler.cc
-index 34cacda8ef225..e0465b8ac1185 100644
---- content/browser/devtools/devtools_http_handler.cc
-+++ content/browser/devtools/devtools_http_handler.cc
+diff -up content/browser/devtools/devtools_http_handler.cc.ung2~ content/browser/devtools/devtools_http_handler.cc
+--- content/browser/devtools/devtools_http_handler.cc.ung2~	2023-10-11 03:22:05.762317200 +0200
++++ content/browser/devtools/devtools_http_handler.cc	2023-10-14 06:33:07.782922599 +0200
 @@ -588,7 +588,7 @@ void DevToolsHttpHandler::OnJsonRequest(
      base::Value::Dict version;
      version.Set("Protocol-Version", DevToolsAgentHost::GetProtocolVersion());
@@ -11,11 +10,10 @@ index 34cacda8ef225..e0465b8ac1185 10064
      version.Set("User-Agent", GetContentClient()->browser()->GetUserAgent());
      version.Set("V8-Version", V8_VERSION_STRING);
      std::string host = info.GetHeaderValue("host");
-diff --git content/browser/loader/navigation_url_loader_impl.cc content/browser/loader/navigation_url_loader_impl.cc
-index 3b58e4f2de295..e0348501c83d8 100644
---- content/browser/loader/navigation_url_loader_impl.cc
-+++ content/browser/loader/navigation_url_loader_impl.cc
-@@ -774,6 +774,17 @@ NavigationURLLoaderImpl::PrepareForNonInterceptedRequest() {
+diff -up content/browser/loader/navigation_url_loader_impl.cc.ung2~ content/browser/loader/navigation_url_loader_impl.cc
+--- content/browser/loader/navigation_url_loader_impl.cc.ung2~	2023-10-11 03:22:05.958332300 +0200
++++ content/browser/loader/navigation_url_loader_impl.cc	2023-10-14 06:33:07.784922618 +0200
+@@ -774,6 +774,17 @@ NavigationURLLoaderImpl::PrepareForNonIn
            resource_request_->has_user_gesture, initiating_origin,
            initiator_document_.AsRenderFrameHostIfValid(), &loader_factory);
  
@@ -33,11 +31,10 @@ index 3b58e4f2de295..e0348501c83d8 10064
        if (loader_factory) {
          factory = base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
              std::move(loader_factory));
-diff --git content/public/browser/content_browser_client.cc content/public/browser/content_browser_client.cc
-index a0d56a9a24f22..c7cc6c3f6ae3f 100644
---- content/public/browser/content_browser_client.cc
-+++ content/public/browser/content_browser_client.cc
-@@ -1047,7 +1047,7 @@ ContentBrowserClient::CreateURLLoaderHandlerForServiceWorkerNavigationPreload(
+diff -up content/public/browser/content_browser_client.cc.ung2~ content/public/browser/content_browser_client.cc
+--- content/public/browser/content_browser_client.cc.ung2~	2023-10-11 03:22:05.770395300 +0200
++++ content/public/browser/content_browser_client.cc	2023-10-14 06:33:07.784922618 +0200
+@@ -1047,7 +1047,7 @@ ContentBrowserClient::CreateURLLoaderHan
  void ContentBrowserClient::OnNetworkServiceCreated(
      network::mojom::NetworkService* network_service) {}
  
@@ -46,7 +43,7 @@ index a0d56a9a24f22..c7cc6c3f6ae3f 10064
      BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -1056,6 +1056,7 @@ void ContentBrowserClient::ConfigureNetworkContextParams(
+@@ -1056,6 +1056,7 @@ void ContentBrowserClient::ConfigureNetw
          cert_verifier_creation_params) {
    network_context_params->user_agent = GetUserAgentBasedOnPolicy(context);
    network_context_params->accept_language = "en-us,en";
@@ -54,10 +51,9 @@ index a0d56a9a24f22..c7cc6c3f6ae3f 10064
  }
  
  std::vector<base::FilePath>
-diff --git content/public/browser/content_browser_client.h content/public/browser/content_browser_client.h
-index a6e922be7e686..e4b4a9150295a 100644
---- content/public/browser/content_browser_client.h
-+++ content/public/browser/content_browser_client.h
+diff -up content/public/browser/content_browser_client.h.ung2~ content/public/browser/content_browser_client.h
+--- content/public/browser/content_browser_client.h.ung2~	2023-10-11 03:22:06.770395300 +0200
++++ content/public/browser/content_browser_client.h	2023-10-14 06:33:07.786922638 +0200
 @@ -40,6 +40,7 @@
  #include "content/public/browser/mojo_binder_policy_map.h"
  #include "content/public/browser/privacy_sandbox_invoking_api.h"
@@ -66,7 +62,7 @@ index a6e922be7e686..e4b4a9150295a 10064
  #include "content/public/common/alternative_error_page_override_info.mojom-forward.h"
  #include "content/public/common/page_visibility_state.h"
  #include "content/public/common/window_container_type.mojom-forward.h"
-@@ -1914,7 +1915,7 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -1914,7 +1915,7 @@ class CONTENT_EXPORT ContentBrowserClien
    //
    // If |relative_partition_path| is the empty string, it means this needs to
    // create the default NetworkContext for the BrowserContext.
@@ -75,7 +71,7 @@ index a6e922be7e686..e4b4a9150295a 10064
        BrowserContext* context,
        bool in_memory,
        const base::FilePath& relative_partition_path,
-@@ -2128,6 +2129,19 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2128,6 +2129,19 @@ class CONTENT_EXPORT ContentBrowserClien
        RenderFrameHost* initiator_document,
        mojo::PendingRemote<network::mojom::URLLoaderFactory>* out_factory);
  
@@ -95,7 +91,7 @@ index a6e922be7e686..e4b4a9150295a 10064
    // Creates an OverlayWindow to be used for video or Picture-in-Picture.
    // This window will house the content shown when in Picture-in-Picture mode.
    // This will return a new OverlayWindow.
-@@ -2184,6 +2198,10 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2184,6 +2198,10 @@ class CONTENT_EXPORT ContentBrowserClien
    // Used as part of the user agent string.
    virtual std::string GetProduct();
  
@@ -106,11 +102,10 @@ index a6e922be7e686..e4b4a9150295a 10064
    // Returns the user agent. This can also return the reduced user agent, based
    // on blink::features::kUserAgentReduction. Content may cache this value.
    virtual std::string GetUserAgent();
-diff --git content/public/renderer/content_renderer_client.h content/public/renderer/content_renderer_client.h
-index a4130ad4dc815..b303f6c8768b7 100644
---- content/public/renderer/content_renderer_client.h
-+++ content/public/renderer/content_renderer_client.h
-@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClient {
+diff -up content/public/renderer/content_renderer_client.h.ung2~ content/public/renderer/content_renderer_client.h
+--- content/public/renderer/content_renderer_client.h.ung2~	2023-10-11 03:22:05.826399600 +0200
++++ content/public/renderer/content_renderer_client.h	2023-10-14 06:33:07.786922638 +0200
+@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClie
    // binding requests from RenderProcessHost::BindReceiver().
    virtual void ExposeInterfacesToBrowser(mojo::BinderMap* binders) {}
  
@@ -120,7 +115,7 @@ index a4130ad4dc815..b303f6c8768b7 10064
    // Notifies that a new RenderFrame has been created.
    virtual void RenderFrameCreated(RenderFrame* render_frame) {}
  
-@@ -318,6 +321,10 @@ class CONTENT_EXPORT ContentRendererClient {
+@@ -318,6 +321,10 @@ class CONTENT_EXPORT ContentRendererClie
    // This method may invalidate the frame.
    virtual void RunScriptsAtDocumentIdle(RenderFrame* render_frame) {}
  
@@ -131,10 +126,9 @@ index a4130ad4dc815..b303f6c8768b7 10064
    // Allows subclasses to enable some runtime features before Blink has
    // started.
    virtual void SetRuntimeFeaturesDefaultsBeforeBlinkInitialization() {}
-diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
-index 328ed025f6b71..3f0e661054c7e 100644
---- content/renderer/render_thread_impl.cc
-+++ content/renderer/render_thread_impl.cc
+diff -up content/renderer/render_thread_impl.cc.ung2~ content/renderer/render_thread_impl.cc
+--- content/renderer/render_thread_impl.cc.ung2~	2023-10-11 03:22:06.894405000 +0200
++++ content/renderer/render_thread_impl.cc	2023-10-14 06:33:07.786922638 +0200
 @@ -621,6 +621,8 @@ void RenderThreadImpl::Init() {
        GetContentClient()->renderer()->CreateURLLoaderThrottleProvider(
            blink::URLLoaderThrottleProviderType::kFrame);
@@ -144,11 +138,10 @@ index 328ed025f6b71..3f0e661054c7e 10064
    GetAssociatedInterfaceRegistry()->AddInterface<mojom::Renderer>(
        base::BindRepeating(&RenderThreadImpl::OnRendererInterfaceReceiver,
                            base::Unretained(this)));
-diff --git content/renderer/renderer_blink_platform_impl.cc content/renderer/renderer_blink_platform_impl.cc
-index 3206463a734a8..39cd7e0e2656c 100644
---- content/renderer/renderer_blink_platform_impl.cc
-+++ content/renderer/renderer_blink_platform_impl.cc
-@@ -947,6 +947,15 @@ SkBitmap* RendererBlinkPlatformImpl::GetSadPageBitmap() {
+diff -up content/renderer/renderer_blink_platform_impl.cc.ung2~ content/renderer/renderer_blink_platform_impl.cc
+--- content/renderer/renderer_blink_platform_impl.cc.ung2~	2023-10-11 03:22:05.898405000 +0200
++++ content/renderer/renderer_blink_platform_impl.cc	2023-10-14 06:33:07.786922638 +0200
+@@ -947,6 +947,15 @@ SkBitmap* RendererBlinkPlatformImpl::Get
  
  //------------------------------------------------------------------------------
  
@@ -164,11 +157,10 @@ index 3206463a734a8..39cd7e0e2656c 10064
  std::unique_ptr<blink::WebV8ValueConverter>
  RendererBlinkPlatformImpl::CreateWebV8ValueConverter() {
    return std::make_unique<V8ValueConverterImpl>();
-diff --git content/renderer/renderer_blink_platform_impl.h content/renderer/renderer_blink_platform_impl.h
-index 4813c8ce4525f..be9f6167288a7 100644
---- content/renderer/renderer_blink_platform_impl.h
-+++ content/renderer/renderer_blink_platform_impl.h
-@@ -224,6 +224,9 @@ class CONTENT_EXPORT RendererBlinkPlatformImpl : public BlinkPlatformImpl {
+diff -up content/renderer/renderer_blink_platform_impl.h.ung2~ content/renderer/renderer_blink_platform_impl.h
+--- content/renderer/renderer_blink_platform_impl.h.ung2~	2023-10-11 03:22:06.898405000 +0200
++++ content/renderer/renderer_blink_platform_impl.h	2023-10-14 06:33:07.787922648 +0200
+@@ -224,6 +224,9 @@ class CONTENT_EXPORT RendererBlinkPlatfo
    InertAndMinimumIntervalOfUserLevelMemoryPressureSignal() override;
  #endif  // BUILDFLAG(IS_ANDROID)
  
@@ -176,13 +168,12 @@ index 4813c8ce4525f..be9f6167288a7 10064
 +  void DevToolsAgentDetached() override;
 +
    // Tells this platform that the renderer is locked to a site (i.e., a scheme
-   // plus eTLD+1, such as https://google.com), or to a more specific origin.
+   // plus eTLD+1, such as https://9oo91e.qjz9zk), or to a more specific origin.
    void SetIsLockedToSite();
-diff --git content/shell/browser/shell_content_browser_client.cc content/shell/browser/shell_content_browser_client.cc
-index c1834434b9e7d..71b9d1034e7d8 100644
---- content/shell/browser/shell_content_browser_client.cc
-+++ content/shell/browser/shell_content_browser_client.cc
-@@ -668,7 +668,7 @@ void ShellContentBrowserClient::GetAdditionalMappedFilesForChildProcess(
+diff -up content/shell/browser/shell_content_browser_client.cc.ung2~ content/shell/browser/shell_content_browser_client.cc
+--- content/shell/browser/shell_content_browser_client.cc.ung2~	2023-10-11 03:22:05.934408000 +0200
++++ content/shell/browser/shell_content_browser_client.cc	2023-10-14 06:33:07.787922648 +0200
+@@ -668,7 +668,7 @@ void ShellContentBrowserClient::GetAddit
  #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) ||
          // BUILDFLAG(IS_ANDROID)
  
@@ -191,7 +182,7 @@ index c1834434b9e7d..71b9d1034e7d8 10064
      BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -677,6 +677,7 @@ void ShellContentBrowserClient::ConfigureNetworkContextParams(
+@@ -677,6 +677,7 @@ void ShellContentBrowserClient::Configur
          cert_verifier_creation_params) {
    ConfigureNetworkContextParamsForShell(context, network_context_params,
                                          cert_verifier_creation_params);
@@ -199,11 +190,10 @@ index c1834434b9e7d..71b9d1034e7d8 10064
  }
  
  std::vector<base::FilePath>
-diff --git content/shell/browser/shell_content_browser_client.h content/shell/browser/shell_content_browser_client.h
-index 32966a5dcf3e6..0954d033d0f4b 100644
---- content/shell/browser/shell_content_browser_client.h
-+++ content/shell/browser/shell_content_browser_client.h
-@@ -130,7 +130,7 @@ class ShellContentBrowserClient : public ContentBrowserClient {
+diff -up content/shell/browser/shell_content_browser_client.h.ung2~ content/shell/browser/shell_content_browser_client.h
+--- content/shell/browser/shell_content_browser_client.h.ung2~	2023-10-11 03:22:05.934408000 +0200
++++ content/shell/browser/shell_content_browser_client.h	2023-10-14 06:33:07.788922658 +0200
+@@ -130,7 +130,7 @@ class ShellContentBrowserClient : public
  #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) ||
          // BUILDFLAG(IS_ANDROID)
    device::GeolocationManager* GetGeolocationManager() override;
@@ -212,11 +202,10 @@ index 32966a5dcf3e6..0954d033d0f4b 10064
        BrowserContext* context,
        bool in_memory,
        const base::FilePath& relative_partition_path,
-diff --git headless/lib/browser/headless_content_browser_client.cc headless/lib/browser/headless_content_browser_client.cc
-index 8d5fc50c9d528..7692150fb9ce0 100644
---- headless/lib/browser/headless_content_browser_client.cc
-+++ headless/lib/browser/headless_content_browser_client.cc
-@@ -294,7 +294,7 @@ bool HeadlessContentBrowserClient::IsSharedStorageSelectURLAllowed(
+diff -up headless/lib/browser/headless_content_browser_client.cc.ung2~ headless/lib/browser/headless_content_browser_client.cc
+--- headless/lib/browser/headless_content_browser_client.cc.ung2~	2023-10-11 03:22:07.774550400 +0200
++++ headless/lib/browser/headless_content_browser_client.cc	2023-10-14 06:33:07.788922658 +0200
+@@ -294,7 +294,7 @@ bool HeadlessContentBrowserClient::IsSha
    return true;
  }
  
@@ -225,7 +214,7 @@ index 8d5fc50c9d528..7692150fb9ce0 10064
      content::BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -304,6 +304,7 @@ void HeadlessContentBrowserClient::ConfigureNetworkContextParams(
+@@ -304,6 +304,7 @@ void HeadlessContentBrowserClient::Confi
    HeadlessBrowserContextImpl::From(context)->ConfigureNetworkContextParams(
        in_memory, relative_partition_path, network_context_params,
        cert_verifier_creation_params);
@@ -233,11 +222,10 @@ index 8d5fc50c9d528..7692150fb9ce0 10064
  }
  
  std::string HeadlessContentBrowserClient::GetProduct() {
-diff --git headless/lib/browser/headless_content_browser_client.h headless/lib/browser/headless_content_browser_client.h
-index dfdef1bdae542..af36779ca0ed6 100644
---- headless/lib/browser/headless_content_browser_client.h
-+++ headless/lib/browser/headless_content_browser_client.h
-@@ -80,7 +80,7 @@ class HeadlessContentBrowserClient : public content::ContentBrowserClient {
+diff -up headless/lib/browser/headless_content_browser_client.h.ung2~ headless/lib/browser/headless_content_browser_client.h
+--- headless/lib/browser/headless_content_browser_client.h.ung2~	2023-10-11 03:22:07.774550400 +0200
++++ headless/lib/browser/headless_content_browser_client.h	2023-10-14 06:33:07.788922658 +0200
+@@ -80,7 +80,7 @@ class HeadlessContentBrowserClient : pub
        const url::Origin& top_frame_origin,
        const url::Origin& accessing_origin) override;
  

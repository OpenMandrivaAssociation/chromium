diff -up chromium-115.0.5790.110/cef/patch/patches/content_2015.patch.omv~ chromium-115.0.5790.110/cef/patch/patches/content_2015.patch
--- chromium-115.0.5790.110/cef/patch/patches/content_2015.patch.omv~	2023-07-27 19:39:58.750575341 +0200
+++ chromium-115.0.5790.110/cef/patch/patches/content_2015.patch	2023-07-27 19:40:55.563113319 +0200
@@ -1,7 +1,6 @@
-diff --git content/browser/devtools/devtools_http_handler.cc content/browser/devtools/devtools_http_handler.cc
-index f4f583be8fba9..a2ed253f3724d 100644
---- content/browser/devtools/devtools_http_handler.cc
-+++ content/browser/devtools/devtools_http_handler.cc
+diff -up content/browser/devtools/devtools_http_handler.cc.cef2~ content/browser/devtools/devtools_http_handler.cc
+--- content/browser/devtools/devtools_http_handler.cc.cef2~	2023-07-26 03:43:50.331048000 +0200
++++ content/browser/devtools/devtools_http_handler.cc	2023-07-27 19:39:07.043087805 +0200
 @@ -588,7 +588,7 @@ void DevToolsHttpHandler::OnJsonRequest(
      base::Value::Dict version;
      version.Set("Protocol-Version", DevToolsAgentHost::GetProtocolVersion());
@@ -11,11 +10,10 @@ index f4f583be8fba9..a2ed253f3724d 10064
      version.Set("User-Agent", GetContentClient()->browser()->GetUserAgent());
      version.Set("V8-Version", V8_VERSION_STRING);
      std::string host = info.GetHeaderValue("host");
-diff --git content/browser/loader/navigation_url_loader_impl.cc content/browser/loader/navigation_url_loader_impl.cc
-index 4438dea521489..987aa9714bd1c 100644
---- content/browser/loader/navigation_url_loader_impl.cc
-+++ content/browser/loader/navigation_url_loader_impl.cc
-@@ -749,6 +749,17 @@ NavigationURLLoaderImpl::PrepareForNonInterceptedRequest() {
+diff -up content/browser/loader/navigation_url_loader_impl.cc.cef2~ content/browser/loader/navigation_url_loader_impl.cc
+--- content/browser/loader/navigation_url_loader_impl.cc.cef2~	2023-07-26 03:43:49.427055800 +0200
++++ content/browser/loader/navigation_url_loader_impl.cc	2023-07-27 19:39:07.043087805 +0200
+@@ -749,6 +749,17 @@ NavigationURLLoaderImpl::PrepareForNonIn
            resource_request_->has_user_gesture, initiating_origin,
            initiator_document_.AsRenderFrameHostIfValid(), &loader_factory);
  
@@ -33,11 +31,10 @@ index 4438dea521489..987aa9714bd1c 10064
        if (loader_factory) {
          factory = base::MakeRefCounted<network::WrapperSharedURLLoaderFactory>(
              std::move(loader_factory));
-diff --git content/public/browser/content_browser_client.cc content/public/browser/content_browser_client.cc
-index 139a3b1cbe854..cb26c1afd379a 100644
---- content/public/browser/content_browser_client.cc
-+++ content/public/browser/content_browser_client.cc
-@@ -990,7 +990,7 @@ ContentBrowserClient::CreateURLLoaderHandlerForServiceWorkerNavigationPreload(
+diff -up content/public/browser/content_browser_client.cc.cef2~ content/public/browser/content_browser_client.cc
+--- content/public/browser/content_browser_client.cc.cef2~	2023-07-26 03:43:49.811087600 +0200
++++ content/public/browser/content_browser_client.cc	2023-07-27 19:39:07.043087805 +0200
+@@ -990,7 +990,7 @@ ContentBrowserClient::CreateURLLoaderHan
  void ContentBrowserClient::OnNetworkServiceCreated(
      network::mojom::NetworkService* network_service) {}
  
@@ -46,7 +43,7 @@ index 139a3b1cbe854..cb26c1afd379a 10064
      BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -999,6 +999,7 @@ void ContentBrowserClient::ConfigureNetworkContextParams(
+@@ -999,6 +999,7 @@ void ContentBrowserClient::ConfigureNetw
          cert_verifier_creation_params) {
    network_context_params->user_agent = GetUserAgentBasedOnPolicy(context);
    network_context_params->accept_language = "en-us,en";
@@ -54,10 +51,9 @@ index 139a3b1cbe854..cb26c1afd379a 10064
  }
  
  std::vector<base::FilePath>
-diff --git content/public/browser/content_browser_client.h content/public/browser/content_browser_client.h
-index 42805faf7e6cf..57c4e444ec126 100644
---- content/public/browser/content_browser_client.h
-+++ content/public/browser/content_browser_client.h
+diff -up content/public/browser/content_browser_client.h.cef2~ content/public/browser/content_browser_client.h
+--- content/public/browser/content_browser_client.h.cef2~	2023-07-26 03:43:50.811087600 +0200
++++ content/public/browser/content_browser_client.h	2023-07-27 19:39:07.044087814 +0200
 @@ -37,6 +37,7 @@
  #include "content/public/browser/login_delegate.h"
  #include "content/public/browser/mojo_binder_policy_map.h"
@@ -66,7 +62,7 @@ index 42805faf7e6cf..57c4e444ec126 10064
  #include "content/public/common/alternative_error_page_override_info.mojom-forward.h"
  #include "content/public/common/page_visibility_state.h"
  #include "content/public/common/window_container_type.mojom-forward.h"
-@@ -1817,7 +1818,7 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -1817,7 +1818,7 @@ class CONTENT_EXPORT ContentBrowserClien
    //
    // If |relative_partition_path| is the empty string, it means this needs to
    // create the default NetworkContext for the BrowserContext.
@@ -75,7 +71,7 @@ index 42805faf7e6cf..57c4e444ec126 10064
        BrowserContext* context,
        bool in_memory,
        const base::FilePath& relative_partition_path,
-@@ -2025,6 +2026,19 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2025,6 +2026,19 @@ class CONTENT_EXPORT ContentBrowserClien
        RenderFrameHost* initiator_document,
        mojo::PendingRemote<network::mojom::URLLoaderFactory>* out_factory);
  
@@ -95,7 +91,7 @@ index 42805faf7e6cf..57c4e444ec126 10064
    // Creates an OverlayWindow to be used for video or Picture-in-Picture.
    // This window will house the content shown when in Picture-in-Picture mode.
    // This will return a new OverlayWindow.
-@@ -2081,6 +2095,10 @@ class CONTENT_EXPORT ContentBrowserClient {
+@@ -2081,6 +2095,10 @@ class CONTENT_EXPORT ContentBrowserClien
    // Used as part of the user agent string.
    virtual std::string GetProduct();
  
@@ -106,11 +102,10 @@ index 42805faf7e6cf..57c4e444ec126 10064
    // Returns the user agent. This can also return the reduced user agent, based
    // on blink::features::kUserAgentReduction. Content may cache this value.
    virtual std::string GetUserAgent();
-diff --git content/public/renderer/content_renderer_client.h content/public/renderer/content_renderer_client.h
-index 834a07bb92d77..64e72df7a6abc 100644
---- content/public/renderer/content_renderer_client.h
-+++ content/public/renderer/content_renderer_client.h
-@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClient {
+diff -up content/public/renderer/content_renderer_client.h.cef2~ content/public/renderer/content_renderer_client.h
+--- content/public/renderer/content_renderer_client.h.cef2~	2023-07-26 03:43:49.847090500 +0200
++++ content/public/renderer/content_renderer_client.h	2023-07-27 19:39:07.044087814 +0200
+@@ -96,6 +96,9 @@ class CONTENT_EXPORT ContentRendererClie
    // binding requests from RenderProcessHost::BindReceiver().
    virtual void ExposeInterfacesToBrowser(mojo::BinderMap* binders) {}
  
@@ -120,7 +115,7 @@ index 834a07bb92d77..64e72df7a6abc 10064
    // Notifies that a new RenderFrame has been created.
    virtual void RenderFrameCreated(RenderFrame* render_frame) {}
  
-@@ -313,6 +316,10 @@ class CONTENT_EXPORT ContentRendererClient {
+@@ -313,6 +316,10 @@ class CONTENT_EXPORT ContentRendererClie
    // This method may invalidate the frame.
    virtual void RunScriptsAtDocumentIdle(RenderFrame* render_frame) {}
  
@@ -131,10 +126,9 @@ index 834a07bb92d77..64e72df7a6abc 10064
    // Allows subclasses to enable some runtime features before Blink has
    // started.
    virtual void SetRuntimeFeaturesDefaultsBeforeBlinkInitialization() {}
-diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
-index 6b37ab029be69..d8d33d81ca246 100644
---- content/renderer/render_thread_impl.cc
-+++ content/renderer/render_thread_impl.cc
+diff -up content/renderer/render_thread_impl.cc.cef2~ content/renderer/render_thread_impl.cc
+--- content/renderer/render_thread_impl.cc.cef2~	2023-07-26 03:43:50.903095000 +0200
++++ content/renderer/render_thread_impl.cc	2023-07-27 19:39:07.044087814 +0200
 @@ -626,6 +626,8 @@ void RenderThreadImpl::Init() {
        GetContentClient()->renderer()->CreateURLLoaderThrottleProvider(
            blink::URLLoaderThrottleProviderType::kFrame);
@@ -144,11 +138,10 @@ index 6b37ab029be69..d8d33d81ca246 10064
    GetAssociatedInterfaceRegistry()->AddInterface<mojom::Renderer>(
        base::BindRepeating(&RenderThreadImpl::OnRendererInterfaceReceiver,
                            base::Unretained(this)));
-diff --git content/renderer/renderer_blink_platform_impl.cc content/renderer/renderer_blink_platform_impl.cc
-index 58caad274969f..1584a5b3ed0cb 100644
---- content/renderer/renderer_blink_platform_impl.cc
-+++ content/renderer/renderer_blink_platform_impl.cc
-@@ -961,6 +961,15 @@ SkBitmap* RendererBlinkPlatformImpl::GetSadPageBitmap() {
+diff -up content/renderer/renderer_blink_platform_impl.cc.cef2~ content/renderer/renderer_blink_platform_impl.cc
+--- content/renderer/renderer_blink_platform_impl.cc.cef2~	2023-07-26 03:43:49.907095400 +0200
++++ content/renderer/renderer_blink_platform_impl.cc	2023-07-27 19:39:07.044087814 +0200
+@@ -961,6 +961,15 @@ SkBitmap* RendererBlinkPlatformImpl::Get
  
  //------------------------------------------------------------------------------
  
@@ -164,11 +157,10 @@ index 58caad274969f..1584a5b3ed0cb 10064
  std::unique_ptr<blink::WebV8ValueConverter>
  RendererBlinkPlatformImpl::CreateWebV8ValueConverter() {
    return std::make_unique<V8ValueConverterImpl>();
-diff --git content/renderer/renderer_blink_platform_impl.h content/renderer/renderer_blink_platform_impl.h
-index 2a01122b62190..ad09cca7df98a 100644
---- content/renderer/renderer_blink_platform_impl.h
-+++ content/renderer/renderer_blink_platform_impl.h
-@@ -228,6 +228,9 @@ class CONTENT_EXPORT RendererBlinkPlatformImpl : public BlinkPlatformImpl {
+diff -up content/renderer/renderer_blink_platform_impl.h.cef2~ content/renderer/renderer_blink_platform_impl.h
+--- content/renderer/renderer_blink_platform_impl.h.cef2~	2023-07-27 19:39:07.044087814 +0200
++++ content/renderer/renderer_blink_platform_impl.h	2023-07-27 19:39:46.278457822 +0200
+@@ -228,6 +228,9 @@ class CONTENT_EXPORT RendererBlinkPlatfo
    InertAndMinimumIntervalOfUserLevelMemoryPressureSignal() override;
  #endif  // BUILDFLAG(IS_ANDROID)
  
@@ -176,13 +168,12 @@ index 2a01122b62190..ad09cca7df98a 10064
 +  void DevToolsAgentDetached() override;
 +
    // Tells this platform that the renderer is locked to a site (i.e., a scheme
-   // plus eTLD+1, such as https://google.com), or to a more specific origin.
+   // plus eTLD+1, such as https://9oo91e.qjz9zk), or to a more specific origin.
    void SetIsLockedToSite();
-diff --git headless/lib/browser/headless_content_browser_client.cc headless/lib/browser/headless_content_browser_client.cc
-index 2a26ffc86c946..ee88229940a74 100644
---- headless/lib/browser/headless_content_browser_client.cc
-+++ headless/lib/browser/headless_content_browser_client.cc
-@@ -298,7 +298,7 @@ bool HeadlessContentBrowserClient::IsSharedStorageSelectURLAllowed(
+diff -up headless/lib/browser/headless_content_browser_client.cc.cef2~ headless/lib/browser/headless_content_browser_client.cc
+--- headless/lib/browser/headless_content_browser_client.cc.cef2~	2023-07-26 03:43:51.275208000 +0200
++++ headless/lib/browser/headless_content_browser_client.cc	2023-07-27 19:39:07.044087814 +0200
+@@ -298,7 +298,7 @@ bool HeadlessContentBrowserClient::IsSha
    return true;
  }
  
@@ -191,7 +182,7 @@ index 2a26ffc86c946..ee88229940a74 10064
      content::BrowserContext* context,
      bool in_memory,
      const base::FilePath& relative_partition_path,
-@@ -308,6 +308,7 @@ void HeadlessContentBrowserClient::ConfigureNetworkContextParams(
+@@ -308,6 +308,7 @@ void HeadlessContentBrowserClient::Confi
    HeadlessBrowserContextImpl::From(context)->ConfigureNetworkContextParams(
        in_memory, relative_partition_path, network_context_params,
        cert_verifier_creation_params);
@@ -199,11 +190,10 @@ index 2a26ffc86c946..ee88229940a74 10064
  }
  
  std::string HeadlessContentBrowserClient::GetProduct() {
-diff --git headless/lib/browser/headless_content_browser_client.h headless/lib/browser/headless_content_browser_client.h
-index be37373d3d4e8..6741578a5f1b8 100644
---- headless/lib/browser/headless_content_browser_client.h
-+++ headless/lib/browser/headless_content_browser_client.h
-@@ -79,7 +79,7 @@ class HeadlessContentBrowserClient : public content::ContentBrowserClient {
+diff -up headless/lib/browser/headless_content_browser_client.h.cef2~ headless/lib/browser/headless_content_browser_client.h
+--- headless/lib/browser/headless_content_browser_client.h.cef2~	2023-07-26 03:43:51.275208000 +0200
++++ headless/lib/browser/headless_content_browser_client.h	2023-07-27 19:39:07.044087814 +0200
+@@ -79,7 +79,7 @@ class HeadlessContentBrowserClient : pub
        const url::Origin& top_frame_origin,
        const url::Origin& accessing_origin) override;
  

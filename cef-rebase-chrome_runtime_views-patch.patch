diff -up chromium-115.0.5790.110/cef/patch/patches/chrome_runtime_views.patch.omv~ chromium-115.0.5790.110/cef/patch/patches/chrome_runtime_views.patch
--- chromium-115.0.5790.110/cef/patch/patches/chrome_runtime_views.patch.omv~	2023-07-27 16:17:24.362118841 +0200
+++ chromium-115.0.5790.110/cef/patch/patches/chrome_runtime_views.patch	2023-07-27 16:17:57.190433151 +0200
@@ -1,8 +1,7 @@
-diff --git chrome/browser/ui/browser_command_controller.cc chrome/browser/ui/browser_command_controller.cc
-index 28088dd31e26b..e67e8164ed181 100644
---- chrome/browser/ui/browser_command_controller.cc
-+++ chrome/browser/ui/browser_command_controller.cc
-@@ -406,6 +406,7 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+diff -up chrome/browser/ui/browser_command_controller.cc.cef1~ chrome/browser/ui/browser_command_controller.cc
+--- chrome/browser/ui/browser_command_controller.cc.cef1~	2023-07-27 16:07:46.391184853 +0200
++++ chrome/browser/ui/browser_command_controller.cc	2023-07-27 16:13:51.747986130 +0200
+@@ -401,6 +401,7 @@ bool BrowserCommandController::ExecuteCo
    // choose to not implement CommandUpdaterDelegate inside this class and
    // therefore command_updater_ doesn't have the delegate set).
    if (!SupportsCommand(id) || !IsCommandEnabled(id)) {
@@ -10,7 +9,7 @@ index 28088dd31e26b..e67e8164ed181 10064
      return false;
    }
  
-@@ -422,6 +423,13 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
+@@ -417,6 +418,13 @@ bool BrowserCommandController::ExecuteCo
    DCHECK(command_updater_.IsCommandEnabled(id))
        << "Invalid/disabled command " << id;
  
@@ -24,7 +23,7 @@ index 28088dd31e26b..e67e8164ed181 10064
    // The order of commands in this switch statement must match the function
    // declaration order in browser.h!
    switch (id) {
-@@ -1113,11 +1121,13 @@ void BrowserCommandController::TabRestoreServiceLoaded(
+@@ -1108,11 +1116,13 @@ void BrowserCommandController::TabRestor
  // BrowserCommandController, private:
  
  bool BrowserCommandController::IsShowingMainUI() {
@@ -40,11 +39,10 @@ index 28088dd31e26b..e67e8164ed181 10064
  }
  
  bool BrowserCommandController::IsWebAppOrCustomTab() const {
-diff --git chrome/browser/ui/toolbar/app_menu_model.cc chrome/browser/ui/toolbar/app_menu_model.cc
-index f6c50fc75faf8..30b0f9fa68554 100644
---- chrome/browser/ui/toolbar/app_menu_model.cc
-+++ chrome/browser/ui/toolbar/app_menu_model.cc
-@@ -192,6 +192,57 @@ void SetCommandIcon(ui::SimpleMenuModel* model,
+diff -up chrome/browser/ui/toolbar/app_menu_model.cc.cef1~ chrome/browser/ui/toolbar/app_menu_model.cc
+--- chrome/browser/ui/toolbar/app_menu_model.cc.cef1~	2023-07-26 03:43:43.202543300 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.cc	2023-07-27 16:13:51.748986141 +0200
+@@ -192,6 +192,57 @@ void SetCommandIcon(ui::SimpleMenuModel*
    }
  }
  
@@ -102,7 +100,7 @@ index f6c50fc75faf8..30b0f9fa68554 10064
  }  // namespace
  
  ////////////////////////////////////////////////////////////////////////////////
-@@ -960,7 +1011,7 @@ bool AppMenuModel::IsCommandIdChecked(int command_id) const {
+@@ -960,7 +1011,7 @@ bool AppMenuModel::IsCommandIdChecked(in
    return false;
  }
  
@@ -111,7 +109,7 @@ index f6c50fc75faf8..30b0f9fa68554 10064
    GlobalError* error =
        GlobalErrorServiceFactory::GetForProfile(browser_->profile())
            ->GetGlobalErrorByMenuItemCommandID(command_id);
-@@ -975,7 +1026,7 @@ bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
+@@ -975,7 +1026,7 @@ bool AppMenuModel::IsCommandIdEnabled(in
    }
  }
  
@@ -120,7 +118,7 @@ index f6c50fc75faf8..30b0f9fa68554 10064
    switch (command_id) {
      case IDC_PIN_TO_START_SCREEN:
        return false;
-@@ -998,6 +1049,34 @@ bool AppMenuModel::IsCommandIdVisible(int command_id) const {
+@@ -998,6 +1049,34 @@ bool AppMenuModel::IsCommandIdVisible(in
    }
  }
  
@@ -205,11 +203,10 @@ index f6c50fc75faf8..30b0f9fa68554 10064
    uma_action_recorded_ = false;
  }
  
-diff --git chrome/browser/ui/toolbar/app_menu_model.h chrome/browser/ui/toolbar/app_menu_model.h
-index 8648fccbe4a2e..386dee69b5eff 100644
---- chrome/browser/ui/toolbar/app_menu_model.h
-+++ chrome/browser/ui/toolbar/app_menu_model.h
-@@ -258,6 +258,9 @@ class AppMenuModel : public ui::SimpleMenuModel,
+diff -up chrome/browser/ui/toolbar/app_menu_model.h.cef1~ chrome/browser/ui/toolbar/app_menu_model.h
+--- chrome/browser/ui/toolbar/app_menu_model.h.cef1~	2023-07-26 03:43:43.202543300 +0200
++++ chrome/browser/ui/toolbar/app_menu_model.h	2023-07-27 16:13:51.748986141 +0200
+@@ -258,6 +258,9 @@ class AppMenuModel : public ui::SimpleMe
    // Appends a zoom menu (without separators).
    void CreateZoomMenu();
  
@@ -219,11 +216,10 @@ index 8648fccbe4a2e..386dee69b5eff 10064
   private:
    // Adds actionable global error menu items to the menu.
    // Examples: Extension permissions and sign in errors.
-diff --git chrome/browser/ui/views/find_bar_host.cc chrome/browser/ui/views/find_bar_host.cc
-index 59024587ef6b7..0c30aa71768cf 100644
---- chrome/browser/ui/views/find_bar_host.cc
-+++ chrome/browser/ui/views/find_bar_host.cc
-@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::Rect* bounds) {
+diff -up chrome/browser/ui/views/find_bar_host.cc.cef1~ chrome/browser/ui/views/find_bar_host.cc
+--- chrome/browser/ui/views/find_bar_host.cc.cef1~	2023-07-26 03:43:43.270548800 +0200
++++ chrome/browser/ui/views/find_bar_host.cc	2023-07-27 16:13:51.748986141 +0200
+@@ -412,6 +412,12 @@ void FindBarHost::GetWidgetBounds(gfx::R
    // The BrowserView does Layout for the components that we care about
    // positioning relative to, so we ask it to tell us where we should go.
    *bounds = browser_view()->GetFindBarBoundingBox();
@@ -236,11 +232,10 @@ index 59024587ef6b7..0c30aa71768cf 10064
  }
  
  void FindBarHost::RegisterAccelerators() {
-diff --git chrome/browser/ui/views/frame/browser_frame.cc chrome/browser/ui/views/frame/browser_frame.cc
-index e01f634cbe20f..9ece0073769e5 100644
---- chrome/browser/ui/views/frame/browser_frame.cc
-+++ chrome/browser/ui/views/frame/browser_frame.cc
-@@ -75,15 +75,23 @@ bool IsUsingLinuxSystemTheme(Profile* profile) {
+diff -up chrome/browser/ui/views/frame/browser_frame.cc.cef1~ chrome/browser/ui/views/frame/browser_frame.cc
+--- chrome/browser/ui/views/frame/browser_frame.cc.cef1~	2023-07-27 16:07:45.405184999 +0200
++++ chrome/browser/ui/views/frame/browser_frame.cc	2023-07-27 16:16:49.111782736 +0200
+@@ -75,15 +75,23 @@ bool IsUsingLinuxSystemTheme(Profile* pr
  ////////////////////////////////////////////////////////////////////////////////
  // BrowserFrame, public:
  
@@ -266,7 +261,7 @@ index e01f634cbe20f..9ece0073769e5 10064
  }
  
  BrowserFrame::~BrowserFrame() {}
-@@ -178,6 +186,12 @@ void BrowserFrame::LayoutWebAppWindowTitle(
+@@ -178,6 +186,12 @@ void BrowserFrame::LayoutWebAppWindowTit
  }
  
  int BrowserFrame::GetTopInset() const {
@@ -279,7 +274,7 @@ index e01f634cbe20f..9ece0073769e5 10064
    return browser_frame_view_->GetTopInset(false);
  }
  
-@@ -194,6 +208,8 @@ BrowserNonClientFrameView* BrowserFrame::GetFrameView() const {
+@@ -194,6 +208,8 @@ BrowserNonClientFrameView* BrowserFrame:
  }
  
  bool BrowserFrame::UseCustomFrame() const {
@@ -288,7 +283,7 @@ index e01f634cbe20f..9ece0073769e5 10064
    return native_browser_frame_->UseCustomFrame();
  }
  
-@@ -207,20 +223,30 @@ bool BrowserFrame::ShouldDrawFrameHeader() const {
+@@ -207,20 +223,30 @@ bool BrowserFrame::ShouldDrawFrameHeader
  
  void BrowserFrame::GetWindowPlacement(gfx::Rect* bounds,
                                        ui::WindowShowState* show_state) const {
@@ -328,7 +323,7 @@ index e01f634cbe20f..9ece0073769e5 10064
    chrome::SaveWindowWorkspace(browser_view_->browser(), GetWorkspace());
    chrome::SaveWindowVisibleOnAllWorkspaces(browser_view_->browser(),
                                             IsVisibleOnAllWorkspaces());
-@@ -411,6 +439,8 @@ void BrowserFrame::OnNativeThemeUpdated(ui::NativeTheme* observed_theme) {
+@@ -411,6 +439,8 @@ void BrowserFrame::OnNativeThemeUpdated(
  
  ui::ColorProviderManager::Key BrowserFrame::GetColorProviderKey() const {
    auto key = Widget::GetColorProviderKey();
@@ -337,7 +332,7 @@ index e01f634cbe20f..9ece0073769e5 10064
    key.frame_type = UseCustomFrame()
                         ? ui::ColorProviderManager::FrameType::kChromium
                         : ui::ColorProviderManager::FrameType::kNative;
-@@ -420,6 +450,9 @@ ui::ColorProviderManager::Key BrowserFrame::GetColorProviderKey() const {
+@@ -420,6 +450,9 @@ ui::ColorProviderManager::Key BrowserFra
  }
  
  absl::optional<SkColor> BrowserFrame::GetUserColor() const {
@@ -347,19 +342,19 @@ index e01f634cbe20f..9ece0073769e5 10064
  #if BUILDFLAG(IS_CHROMEOS_ASH)
    // ChromeOS SystemWebApps use the OS theme all the time.
    if (ash::IsSystemWebApp(browser_view_->browser())) {
-@@ -540,5 +573,8 @@ bool BrowserFrame::RegenerateFrameOnThemeChange(
+@@ -540,6 +573,9 @@ bool BrowserFrame::RegenerateFrameOnThem
  }
  
  bool BrowserFrame::IsIncognitoBrowser() const {
 +  if (!browser_view_) {
 +    return true;
 +  }
+   if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
+     return false;
    return browser_view_->browser()->profile()->IsIncognitoProfile();
- }
-diff --git chrome/browser/ui/views/frame/browser_frame.h chrome/browser/ui/views/frame/browser_frame.h
-index 795f057fedc51..54b08509919af 100644
---- chrome/browser/ui/views/frame/browser_frame.h
-+++ chrome/browser/ui/views/frame/browser_frame.h
+diff -up chrome/browser/ui/views/frame/browser_frame.h.cef1~ chrome/browser/ui/views/frame/browser_frame.h
+--- chrome/browser/ui/views/frame/browser_frame.h.cef1~	2023-07-26 03:43:43.274549200 +0200
++++ chrome/browser/ui/views/frame/browser_frame.h	2023-07-27 16:13:51.748986141 +0200
 @@ -61,7 +61,9 @@ enum class TabDragKind {
  // This is a virtual interface that allows system specific browser frames.
  class BrowserFrame : public views::Widget, public views::ContextMenuController {
@@ -370,10 +365,9 @@ index 795f057fedc51..54b08509919af 10064
  
    BrowserFrame(const BrowserFrame&) = delete;
    BrowserFrame& operator=(const BrowserFrame&) = delete;
-diff --git chrome/browser/ui/views/frame/browser_view.cc chrome/browser/ui/views/frame/browser_view.cc
-index bd940fc19123c..c31d4c8fb90fb 100644
---- chrome/browser/ui/views/frame/browser_view.cc
-+++ chrome/browser/ui/views/frame/browser_view.cc
+diff -up chrome/browser/ui/views/frame/browser_view.cc.cef1~ chrome/browser/ui/views/frame/browser_view.cc
+--- chrome/browser/ui/views/frame/browser_view.cc.cef1~	2023-07-27 16:07:45.404184989 +0200
++++ chrome/browser/ui/views/frame/browser_view.cc	2023-07-27 16:13:51.749986151 +0200
 @@ -314,11 +314,10 @@ using content::NativeWebKeyboardEvent;
  using content::WebContents;
  using web_modal::WebContentsModalDialogHost;
@@ -389,7 +383,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  
  #if BUILDFLAG(IS_CHROMEOS_ASH)
  // UMA histograms that record animation smoothness for tab loading animation.
-@@ -789,11 +788,22 @@ class BrowserView::AccessibilityModeObserver : public ui::AXModeObserver {
+@@ -789,11 +788,22 @@ class BrowserView::AccessibilityModeObse
  ///////////////////////////////////////////////////////////////////////////////
  // BrowserView, public:
  
@@ -413,7 +407,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    SetShowIcon(
        ::ShouldShowWindowIcon(browser_.get(), AppUsesWindowControlsOverlay()));
  
-@@ -837,7 +847,6 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -837,7 +847,6 @@ BrowserView::BrowserView(std::unique_ptr
    }
  
    browser_->tab_strip_model()->AddObserver(this);
@@ -421,7 +415,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  
    // Top container holds tab strip region and toolbar and lives at the front of
    // the view hierarchy.
-@@ -893,8 +902,15 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
+@@ -893,8 +902,15 @@ BrowserView::BrowserView(std::unique_ptr
    contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
        devtools_web_view_, contents_web_view_));
  
@@ -439,7 +433,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  
    contents_separator_ =
        top_container_->AddChildView(std::make_unique<ContentsSeparator>());
-@@ -1082,12 +1098,14 @@ gfx::Size BrowserView::GetWebAppFrameToolbarPreferredSize() const {
+@@ -1082,12 +1098,14 @@ gfx::Size BrowserView::GetWebAppFrameToo
  
  #if BUILDFLAG(IS_MAC)
  bool BrowserView::UsesImmersiveFullscreenMode() const {
@@ -456,7 +450,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  }
  
  bool BrowserView::UsesImmersiveFullscreenTabbedMode() const {
-@@ -1812,6 +1830,8 @@ bool BrowserView::ShouldHideUIForFullscreen() const {
+@@ -1816,6 +1834,8 @@ bool BrowserView::ShouldHideUIForFullscr
    if (immersive_mode_controller_->IsEnabled())
      return false;
  
@@ -465,7 +459,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    return frame_->GetFrameView()->ShouldHideTopUIForFullscreen();
  }
  
-@@ -2711,7 +2731,8 @@ DownloadShelf* BrowserView::GetDownloadShelf() {
+@@ -2715,7 +2735,8 @@ DownloadShelf* BrowserView::GetDownloadS
  }
  
  DownloadBubbleUIController* BrowserView::GetDownloadBubbleUIController() {
@@ -475,7 +469,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    if (auto* download_button = toolbar_button_provider_->GetDownloadButton())
      return download_button->bubble_controller();
    return nullptr;
-@@ -3211,7 +3232,8 @@ void BrowserView::ReparentTopContainerForEndOfImmersive() {
+@@ -3215,7 +3236,8 @@ void BrowserView::ReparentTopContainerFo
    if (top_container()->parent() == this)
      return;
  
@@ -485,7 +479,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    top_container()->DestroyLayer();
    AddChildViewAt(top_container(), 0);
    EnsureFocusOrder();
-@@ -3765,8 +3787,10 @@ void BrowserView::Layout() {
+@@ -3769,8 +3791,10 @@ void BrowserView::Layout() {
  
    // TODO(jamescook): Why was this in the middle of layout code?
    toolbar_->location_bar()->omnibox_view()->SetFocusBehavior(
@@ -498,7 +492,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  
    // Some of the situations when the BrowserView is laid out are:
    // - Enter/exit immersive fullscreen mode.
-@@ -3832,6 +3856,11 @@ void BrowserView::AddedToWidget() {
+@@ -3836,6 +3860,11 @@ void BrowserView::AddedToWidget() {
    SetThemeProfileForWindow(GetNativeWindow(), browser_->profile());
  #endif
  
@@ -510,7 +504,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    toolbar_->Init();
  
    // TODO(pbos): Investigate whether the side panels should be creatable when
-@@ -3879,13 +3908,9 @@ void BrowserView::AddedToWidget() {
+@@ -3883,13 +3912,9 @@ void BrowserView::AddedToWidget() {
  
    EnsureFocusOrder();
  
@@ -526,7 +520,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    using_native_frame_ = frame_->ShouldUseNativeFrame();
  
    MaybeInitializeWebUITabStrip();
-@@ -4290,7 +4315,8 @@ void BrowserView::ProcessFullscreen(bool fullscreen,
+@@ -4294,7 +4319,8 @@ void BrowserView::ProcessFullscreen(bool
    // Undo our anti-jankiness hacks and force a re-layout.
    in_process_fullscreen_ = false;
    ToolbarSizeChanged(false);
@@ -536,7 +530,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
  }
  
  bool BrowserView::ShouldUseImmersiveFullscreenForUrl(const GURL& url) const {
-@@ -4661,6 +4687,8 @@ Profile* BrowserView::GetProfile() {
+@@ -4665,6 +4691,8 @@ Profile* BrowserView::GetProfile() {
  }
  
  void BrowserView::UpdateUIForTabFullscreen() {
@@ -545,7 +539,7 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    frame()->GetFrameView()->UpdateFullscreenTopUI();
  }
  
-@@ -4683,6 +4711,8 @@ void BrowserView::HideDownloadShelf() {
+@@ -4687,6 +4715,8 @@ void BrowserView::HideDownloadShelf() {
  }
  
  bool BrowserView::CanUserExitFullscreen() const {
@@ -554,11 +548,10 @@ index bd940fc19123c..c31d4c8fb90fb 10064
    return frame_->GetFrameView()->CanUserExitFullscreen();
  }
  
-diff --git chrome/browser/ui/views/frame/browser_view.h chrome/browser/ui/views/frame/browser_view.h
-index b9bb37f29425c..4b36ea92a74a2 100644
---- chrome/browser/ui/views/frame/browser_view.h
-+++ chrome/browser/ui/views/frame/browser_view.h
-@@ -123,11 +123,16 @@ class BrowserView : public BrowserWindow,
+diff -up chrome/browser/ui/views/frame/browser_view.h.cef1~ chrome/browser/ui/views/frame/browser_view.h
+--- chrome/browser/ui/views/frame/browser_view.h.cef1~	2023-07-26 03:43:44.282549900 +0200
++++ chrome/browser/ui/views/frame/browser_view.h	2023-07-27 16:13:51.749986151 +0200
+@@ -123,11 +123,16 @@ class BrowserView : public BrowserWindow
                      public webapps::AppBannerManager::Observer {
   public:
    METADATA_HEADER(BrowserView);
@@ -575,7 +568,7 @@ index b9bb37f29425c..4b36ea92a74a2 10064
    void set_frame(BrowserFrame* frame) {
      frame_ = frame;
      paint_as_active_subscription_ =
-@@ -777,6 +782,12 @@ class BrowserView : public BrowserWindow,
+@@ -777,6 +782,12 @@ class BrowserView : public BrowserWindow
      return web_app_frame_toolbar();
    }
  
@@ -588,10 +581,9 @@ index b9bb37f29425c..4b36ea92a74a2 10064
   private:
    // Do not friend BrowserViewLayout. Use the BrowserViewLayoutDelegate
    // interface to keep these two classes decoupled and testable.
-diff --git chrome/browser/ui/views/frame/browser_view_layout.cc chrome/browser/ui/views/frame/browser_view_layout.cc
-index cf12bbd30e086..a227f64d8d5e9 100644
---- chrome/browser/ui/views/frame/browser_view_layout.cc
-+++ chrome/browser/ui/views/frame/browser_view_layout.cc
+diff -up chrome/browser/ui/views/frame/browser_view_layout.cc.cef1~ chrome/browser/ui/views/frame/browser_view_layout.cc
+--- chrome/browser/ui/views/frame/browser_view_layout.cc.cef1~	2023-07-26 03:43:43.282549900 +0200
++++ chrome/browser/ui/views/frame/browser_view_layout.cc	2023-07-27 16:13:51.749986151 +0200
 @@ -47,6 +47,10 @@
  #include "ui/views/window/client_view.h"
  #include "ui/views/window/hit_test_utils.h"
@@ -603,7 +595,7 @@ index cf12bbd30e086..a227f64d8d5e9 10064
  using views::View;
  using web_modal::ModalDialogHostObserver;
  using web_modal::WebContentsModalDialogHost;
-@@ -560,6 +564,13 @@ int BrowserViewLayout::LayoutWebUITabStrip(int top) {
+@@ -560,6 +564,13 @@ int BrowserViewLayout::LayoutWebUITabStr
  
  int BrowserViewLayout::LayoutToolbar(int top) {
    TRACE_EVENT0("ui", "BrowserViewLayout::LayoutToolbar");
@@ -617,10 +609,9 @@ index cf12bbd30e086..a227f64d8d5e9 10064
    int browser_view_width = vertical_layout_rect_.width();
    bool toolbar_visible = delegate_->IsToolbarVisible();
    int height = toolbar_visible ? toolbar_->GetPreferredSize().height() : 0;
-diff --git chrome/browser/ui/views/frame/contents_web_view.cc chrome/browser/ui/views/frame/contents_web_view.cc
-index 5e059b9878fc2..c1f6fbcd40ec4 100644
---- chrome/browser/ui/views/frame/contents_web_view.cc
-+++ chrome/browser/ui/views/frame/contents_web_view.cc
+diff -up chrome/browser/ui/views/frame/contents_web_view.cc.cef1~ chrome/browser/ui/views/frame/contents_web_view.cc
+--- chrome/browser/ui/views/frame/contents_web_view.cc.cef1~	2023-07-26 03:43:43.282549900 +0200
++++ chrome/browser/ui/views/frame/contents_web_view.cc	2023-07-27 16:13:51.749986151 +0200
 @@ -26,6 +26,11 @@
  ContentsWebView::ContentsWebView(content::BrowserContext* browser_context)
      : views::WebView(browser_context),
@@ -633,11 +624,10 @@ index 5e059b9878fc2..c1f6fbcd40ec4 10064
  }
  
  ContentsWebView::~ContentsWebView() {
-diff --git chrome/browser/ui/views/page_action/page_action_icon_controller.cc chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-index 85a3c9eec15fe..e9a8bc50532f8 100644
---- chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-+++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
-@@ -93,6 +93,12 @@ void PageActionIconController::Init(const PageActionIconParams& params,
+diff -up chrome/browser/ui/views/page_action/page_action_icon_controller.cc.cef1~ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
+--- chrome/browser/ui/views/page_action/page_action_icon_controller.cc.cef1~	2023-07-26 03:43:43.318552700 +0200
++++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc	2023-07-27 16:13:51.749986151 +0200
+@@ -93,6 +93,12 @@ void PageActionIconController::Init(cons
    };
  
    for (PageActionIconType type : params.types_enabled) {
@@ -650,11 +640,10 @@ index 85a3c9eec15fe..e9a8bc50532f8 10064
      switch (type) {
        case PageActionIconType::kPaymentsOfferNotification:
          add_page_action_icon(
-diff --git chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-index 2753a95f8ff35..9745477102917 100644
---- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-+++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
-@@ -559,33 +559,47 @@ gfx::Range BrowserTabStripController::ListTabsInGroup(
+diff -up chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.cef1~ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+--- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc.cef1~	2023-07-26 03:43:43.382558000 +0200
++++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc	2023-07-27 16:13:51.749986151 +0200
+@@ -559,33 +559,47 @@ gfx::Range BrowserTabStripController::Li
  }
  
  bool BrowserTabStripController::IsFrameCondensed() const {
@@ -702,11 +691,10 @@ index 2753a95f8ff35..9745477102917 10064
    return GetFrameView()->GetCustomBackgroundId(active_state);
  }
  
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.cc chrome/browser/ui/views/toolbar/toolbar_view.cc
-index 641236e5f8d88..03d55e77c1e31 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.cc
-+++ chrome/browser/ui/views/toolbar/toolbar_view.cc
-@@ -176,12 +176,13 @@ constexpr int kBrowserAppMenuRefreshCollapsedMargin = 2;
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.cc.cef1~ chrome/browser/ui/views/toolbar/toolbar_view.cc
+--- chrome/browser/ui/views/toolbar/toolbar_view.cc.cef1~	2023-07-27 16:07:45.402184968 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.cc	2023-07-27 16:15:47.058178214 +0200
+@@ -176,12 +176,13 @@ constexpr int kBrowserAppMenuRefreshColl
  ////////////////////////////////////////////////////////////////////////////////
  // ToolbarView, public:
  
@@ -780,20 +768,19 @@ index 641236e5f8d88..03d55e77c1e31 10064
      send_tab_to_self_button =
          std::make_unique<send_tab_to_self::SendTabToSelfToolbarIconView>(
              browser_view_);
-@@ -317,7 +335,7 @@ void ToolbarView::Init() {
- 
+@@ -318,7 +336,7 @@ void ToolbarView::Init() {
    std::unique_ptr<SidePanelToolbarButton> side_panel_button;
    std::unique_ptr<SidePanelToolbarContainer> side_panel_toolbar_container;
--  if (browser_view_->unified_side_panel()) {
-+  if (browser_view_->unified_side_panel() && BUTTON_VISIBLE(kSidePanel)) {
+   if (browser_view_->unified_side_panel() &&
+-      !base::CommandLine::ForCurrentProcess()->HasSwitch("hide-sidepanel-button")) {
++      !base::CommandLine::ForCurrentProcess()->HasSwitch("hide-sidepanel-button") && BUTTON_VISIBLE(kSidePanel)) {
      if (companion::IsCompanionFeatureEnabled()) {
        side_panel_toolbar_container =
            std::make_unique<SidePanelToolbarContainer>(browser_view_);
-diff --git chrome/browser/ui/views/toolbar/toolbar_view.h chrome/browser/ui/views/toolbar/toolbar_view.h
-index c38f2b0545d21..fe9a92b2f610c 100644
---- chrome/browser/ui/views/toolbar/toolbar_view.h
-+++ chrome/browser/ui/views/toolbar/toolbar_view.h
-@@ -89,7 +89,8 @@ class ToolbarView : public views::AccessiblePaneView,
+diff -up chrome/browser/ui/views/toolbar/toolbar_view.h.cef1~ chrome/browser/ui/views/toolbar/toolbar_view.h
+--- chrome/browser/ui/views/toolbar/toolbar_view.h.cef1~	2023-07-26 03:43:43.402559800 +0200
++++ chrome/browser/ui/views/toolbar/toolbar_view.h	2023-07-27 16:13:51.749986151 +0200
+@@ -89,7 +89,8 @@ class ToolbarView : public views::Access
                  // needs to be displayed.
    };
  

diff -up chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.cc.22~ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
--- chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.cc.22~	2020-08-19 11:53:07.000000000 +0200
+++ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.cc	2020-08-21 01:59:34.828143175 +0200
@@ -710,7 +710,7 @@ void VaapiVideoDecodeAccelerator::Assign
   // If we aren't in BufferAllocationMode::kNone, we have to allocate a
   // |vpp_vaapi_wrapper_| for VaapiPicture to DownloadFromSurface() the VA's
   // internal decoded frame.
-  if (buffer_allocation_mode_ != BufferAllocationMode::kNone) {
+  if (buffer_allocation_mode_ != BufferAllocationMode::kNone && buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau) {
     if (!vpp_vaapi_wrapper_) {
       vpp_vaapi_wrapper_ = VaapiWrapper::Create(
           VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -766,7 +766,7 @@ void VaapiVideoDecodeAccelerator::Assign
 
   // If we aren't in BufferAllocationMode::kNone, we use |va_surface_ids| for
   // decode, otherwise ask |vaapi_wrapper_| to allocate them for us.
-  if (buffer_allocation_mode_ == BufferAllocationMode::kNone) {
+  if (buffer_allocation_mode_ == BufferAllocationMode::kNone || buffer_allocation_mode_ == BufferAllocationMode::kWrapVdpau) {
     DCHECK(!va_surface_ids.empty());
     RETURN_AND_NOTIFY_ON_FAILURE(
         vaapi_wrapper_->CreateContext(requested_pic_size_),
@@ -1201,6 +1201,11 @@ VaapiVideoDecodeAccelerator::GetSupporte
 
 VaapiVideoDecodeAccelerator::BufferAllocationMode
 VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
+  // NVIDIA blobs use VDPAU
+  if (VaapiWrapper::GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+    LOG(INFO) << "VA-API driver on VDPAU backend";
+    return BufferAllocationMode::kWrapVdpau;
+  }
 #if defined(USE_X11)
   // The IMPORT mode is used for Android on Chrome OS, so this doesn't apply
   // here.
@@ -1225,7 +1230,7 @@ VaapiVideoDecodeAccelerator::DecideBuffe
   // associated format reconciliation copy, avoiding all internal buffer
   // allocations.
   // TODO(crbug.com/911754): Enable for VP9 Profile 2.
-  if (IsGeminiLakeOrLater() &&
+  if (false && IsGeminiLakeOrLater() &&
       (profile_ == VP9PROFILE_PROFILE0 || profile_ == VP8PROFILE_ANY ||
        (profile_ >= H264PROFILE_MIN && profile_ <= H264PROFILE_MAX))) {
     // Add one to the reference frames for the one being currently egressed, and
diff -up chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.h.22~ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.h
--- chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.h.22~	2020-08-19 11:53:07.000000000 +0200
+++ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_video_decode_accelerator.h	2020-08-21 01:48:30.341391601 +0200
@@ -212,6 +212,7 @@ class MEDIA_GPU_EXPORT VaapiVideoDecodeA
     // Using |client_|s provided PictureBuffers and as many internally
     // allocated.
     kNormal,
+    kWrapVdpau,
   };
 
   // Decides the concrete buffer allocation mode, depending on the hardware
diff -up chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.cc.22~ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.cc
--- chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.cc.22~	2020-08-19 11:53:07.000000000 +0200
+++ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.cc	2020-08-21 01:48:30.341391601 +0200
@@ -136,6 +136,9 @@ media::VAImplementation VendorStringToIm
   } else if (base::StartsWith(va_vendor_string, "Intel iHD driver",
                               base::CompareCase::SENSITIVE)) {
     return media::VAImplementation::kIntelIHD;
+  } else if (base::StartsWith(va_vendor_string, "Splitted-Desktop Systems VDPAU",
+                              base::CompareCase::SENSITIVE)) {
+    return media::VAImplementation::kNVIDIAVDPAU;
   }
   return media::VAImplementation::kOther;
 }
diff -up chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.h.22~ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.h
--- chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.h.22~	2020-08-19 11:53:07.000000000 +0200
+++ chromium-86.0.4238.0/media/gpu/vaapi/vaapi_wrapper.h	2020-08-21 01:48:30.341391601 +0200
@@ -80,6 +80,7 @@ enum class VAImplementation {
   kIntelIHD,
   kOther,
   kInvalid,
+  kNVIDIAVDPAU,
 };
 
 // This class handles VA-API calls and ensures proper locking of VA-API calls

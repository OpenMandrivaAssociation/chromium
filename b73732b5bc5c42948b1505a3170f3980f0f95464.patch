From b73732b5bc5c42948b1505a3170f3980f0f95464 Mon Sep 17 00:00:00 2001
From: reito <cnschwarzer@qq.com>
Date: Sat, 3 Feb 2024 12:14:05 +0800
Subject: [PATCH] Shared textures with skia

Original code from:
https://bitbucket.org/reitovovo/cef/branch/master-osr
Author: Carol Wolfking
We just rebased it to be in a single commit.
This requires the chromium patches in the two parent commits.
---
 .../browser_platform_delegate_create.cc       |  4 +-
 .../browser_platform_delegate_osr_linux.cc    |  3 +-
 .../osr/browser_platform_delegate_osr_linux.h |  1 +
 .../osr/browser_platform_delegate_osr_mac.h   |  4 +-
 .../osr/browser_platform_delegate_osr_mac.mm  |  8 ++--
 .../osr/render_widget_host_view_osr.cc        | 45 ++++++++++++++++++-
 .../browser/osr/render_widget_host_view_osr.h |  4 ++
 libcef/browser/osr/video_consumer_osr.cc      | 36 +++++++++++++--
 libcef/browser/osr/video_consumer_osr.h       |  5 ++-
 .../browser/browser_window_osr_mac.mm         | 10 +++++
 tests/cefclient/browser/main_context_impl.cc  | 10 +++--
 tests/cefclient/browser/main_context_impl.h   |  2 -
 tests/cefclient/browser/osr_d3d11_win.cc      | 17 ++++++-
 .../browser/osr_render_handler_win_d3d11.cc   |  2 +-
 tests/cefclient/browser/osr_renderer.h        |  2 +
 15 files changed, 132 insertions(+), 21 deletions(-)

diff --git a/libcef/browser/browser_platform_delegate_create.cc b/libcef/browser/browser_platform_delegate_create.cc
index 5e09068ba..98a790046 100644
--- a/libcef/browser/browser_platform_delegate_create.cc
+++ b/libcef/browser/browser_platform_delegate_create.cc
@@ -59,10 +59,10 @@ std::unique_ptr<CefBrowserPlatformDelegateOsr> CreateOSRDelegate(
       std::move(native_delegate), use_shared_texture, use_external_begin_frame);
 #elif BUILDFLAG(IS_MAC)
   return std::make_unique<CefBrowserPlatformDelegateOsrMac>(
-      std::move(native_delegate));
+      std::move(native_delegate), use_shared_texture, use_external_begin_frame);
 #elif BUILDFLAG(IS_LINUX)
   return std::make_unique<CefBrowserPlatformDelegateOsrLinux>(
-      std::move(native_delegate), use_external_begin_frame);
+      std::move(native_delegate), use_shared_texture, use_external_begin_frame);
 #endif
 }
 
diff --git a/libcef/browser/osr/browser_platform_delegate_osr_linux.cc b/libcef/browser/osr/browser_platform_delegate_osr_linux.cc
index 0834e6456..062984453 100644
--- a/libcef/browser/osr/browser_platform_delegate_osr_linux.cc
+++ b/libcef/browser/osr/browser_platform_delegate_osr_linux.cc
@@ -8,9 +8,10 @@
 
 CefBrowserPlatformDelegateOsrLinux::CefBrowserPlatformDelegateOsrLinux(
     std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate,
+    bool use_shared_texture,
     bool use_external_begin_frame)
     : CefBrowserPlatformDelegateOsr(std::move(native_delegate),
-                                    /*use_shared_texture=*/false,
+                                    use_shared_texture,
                                     use_external_begin_frame) {}
 
 CefWindowHandle CefBrowserPlatformDelegateOsrLinux::GetHostWindowHandle()
diff --git a/libcef/browser/osr/browser_platform_delegate_osr_linux.h b/libcef/browser/osr/browser_platform_delegate_osr_linux.h
index 071a2cdd4..93f03ba83 100644
--- a/libcef/browser/osr/browser_platform_delegate_osr_linux.h
+++ b/libcef/browser/osr/browser_platform_delegate_osr_linux.h
@@ -13,6 +13,7 @@ class CefBrowserPlatformDelegateOsrLinux
  public:
   CefBrowserPlatformDelegateOsrLinux(
       std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate,
+      bool use_shared_texture,
       bool use_external_begin_frame);
 
   // CefBrowserPlatformDelegate methods:
diff --git a/libcef/browser/osr/browser_platform_delegate_osr_mac.h b/libcef/browser/osr/browser_platform_delegate_osr_mac.h
index 923e3c40b..43ed36aa2 100644
--- a/libcef/browser/osr/browser_platform_delegate_osr_mac.h
+++ b/libcef/browser/osr/browser_platform_delegate_osr_mac.h
@@ -11,7 +11,9 @@
 class CefBrowserPlatformDelegateOsrMac : public CefBrowserPlatformDelegateOsr {
  public:
   explicit CefBrowserPlatformDelegateOsrMac(
-      std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate);
+      std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate,
+      bool use_shared_texture,
+      bool use_external_begin_frame);
 
   // CefBrowserPlatformDelegate methods:
   CefWindowHandle GetHostWindowHandle() const override;
diff --git a/libcef/browser/osr/browser_platform_delegate_osr_mac.mm b/libcef/browser/osr/browser_platform_delegate_osr_mac.mm
index d67734ff2..aebb71d6f 100644
--- a/libcef/browser/osr/browser_platform_delegate_osr_mac.mm
+++ b/libcef/browser/osr/browser_platform_delegate_osr_mac.mm
@@ -7,10 +7,12 @@
 #include <utility>
 
 CefBrowserPlatformDelegateOsrMac::CefBrowserPlatformDelegateOsrMac(
-    std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate)
+    std::unique_ptr<CefBrowserPlatformDelegateNative> native_delegate,
+    bool use_shared_texture,
+    bool use_external_begin_frame)
     : CefBrowserPlatformDelegateOsr(std::move(native_delegate),
-                                    /*use_shared_texture=*/false,
-                                    /*use_external_begin_frame=*/false) {}
+                                    use_shared_texture,
+                                    use_external_begin_frame) {}
 
 CefWindowHandle CefBrowserPlatformDelegateOsrMac::GetHostWindowHandle() const {
   return native_delegate_->window_info().parent_view;
diff --git a/libcef/browser/osr/render_widget_host_view_osr.cc b/libcef/browser/osr/render_widget_host_view_osr.cc
index fb6981570..f47ef341b 100644
--- a/libcef/browser/osr/render_widget_host_view_osr.cc
+++ b/libcef/browser/osr/render_widget_host_view_osr.cc
@@ -202,6 +202,7 @@ CefRenderWidgetHostViewOSR::CefRenderWidgetHostViewOSR(
     CefRenderWidgetHostViewOSR* parent_host_view)
     : content::RenderWidgetHostViewBase(widget),
       background_color_(background_color),
+      use_shared_texture_(use_shared_texture),
       render_widget_host_(content::RenderWidgetHostImpl::From(widget)),
       has_parent_(parent_host_view != nullptr),
       parent_host_view_(parent_host_view),
@@ -397,7 +398,8 @@ void CefRenderWidgetHostViewOSR::ShowWithVisibility(
   if (!content::GpuDataManagerImpl::GetInstance()->IsGpuCompositingDisabled()) {
     // Start generating frames when we're visible and at the correct size.
     if (!video_consumer_) {
-      video_consumer_ = std::make_unique<CefVideoConsumerOSR>(this);
+      video_consumer_ =
+          std::make_unique<CefVideoConsumerOSR>(this, use_shared_texture_);
       UpdateFrameRate();
     } else {
       video_consumer_->SetActive(true);
@@ -1590,6 +1592,47 @@ void CefRenderWidgetHostViewOSR::OnPaint(const gfx::Rect& damage_rect,
   }
 }
 
+void CefRenderWidgetHostViewOSR::OnAcceleratedPaint(
+    const gfx::Rect& damage_rect,
+    const gfx::Size& pixel_size,
+    const void* shared_handle) {
+  TRACE_EVENT0("cef", "CefRenderWidgetHostViewOSR::OnAcceleratedPaint");
+
+  // Workaround for https://github.com/chromiumembedded/cef/issues/2817
+  if (!is_showing_) {
+    return;
+  }
+
+  if (!shared_handle) {
+    return;
+  }
+
+  CefRefPtr<CefRenderHandler> handler =
+      browser_impl_->client()->GetRenderHandler();
+  CHECK(handler);
+
+  gfx::Rect rect_in_pixels(0, 0, pixel_size.width(), pixel_size.height());
+  rect_in_pixels.Intersect(damage_rect);
+
+  CefRenderHandler::RectList rcList;
+  rcList.emplace_back(rect_in_pixels.x(), rect_in_pixels.y(),
+                      rect_in_pixels.width(), rect_in_pixels.height());
+
+  handler->OnAcceleratedPaint(browser_impl_.get(),
+                              IsPopupWidget() ? PET_POPUP : PET_VIEW, rcList,
+                              const_cast<void*>(shared_handle));
+
+  // Release the resize hold when we reach the desired size.
+  if (hold_resize_) {
+    DCHECK_GT(cached_scale_factor_, 0);
+    gfx::Size expected_size =
+        gfx::ScaleToCeiledSize(GetViewBounds().size(), cached_scale_factor_);
+    if (pixel_size == expected_size) {
+      ReleaseResizeHold();
+    }
+  }
+}
+
 ui::Layer* CefRenderWidgetHostViewOSR::GetRootLayer() const {
   return root_layer_.get();
 }
diff --git a/libcef/browser/osr/render_widget_host_view_osr.h b/libcef/browser/osr/render_widget_host_view_osr.h
index 17b0e6955..4f389eda3 100644
--- a/libcef/browser/osr/render_widget_host_view_osr.h
+++ b/libcef/browser/osr/render_widget_host_view_osr.h
@@ -254,6 +254,9 @@ class CefRenderWidgetHostViewOSR
   void OnPaint(const gfx::Rect& damage_rect,
                const gfx::Size& pixel_size,
                const void* pixels);
+  void OnAcceleratedPaint(const gfx::Rect& damage_rect,
+                          const gfx::Size& pixel_size,
+                          const void* shared_handle);
 
   void OnBeginFame(base::TimeTicks frame_time);
 
@@ -401,6 +404,7 @@ class CefRenderWidgetHostViewOSR
   uint64_t begin_frame_number_ = viz::BeginFrameArgs::kStartingFrameNumber;
   bool begin_frame_pending_ = false;
 
+  bool use_shared_texture_ = false;
   bool sync_frame_rate_ = false;
   bool external_begin_frame_enabled_ = false;
   bool needs_external_begin_frames_ = false;
diff --git a/libcef/browser/osr/video_consumer_osr.cc b/libcef/browser/osr/video_consumer_osr.cc
index 055cd6630..10371c044 100644
--- a/libcef/browser/osr/video_consumer_osr.cc
+++ b/libcef/browser/osr/video_consumer_osr.cc
@@ -11,6 +11,12 @@
 #include "media/capture/mojom/video_capture_types.mojom.h"
 #include "ui/gfx/skbitmap_operations.h"
 
+#if BUILDFLAG(IS_WIN)
+#include "ipc/service/gpu_memory_buffer_factory_dxgi.h"
+#elif BUILDFLAG(IS_APPLE)
+#include "ipc/service/gpu_memory_buffer_factory_io_surface.h"
+#endif
+
 namespace {
 
 // Helper to always call Done() at the end of OnFrameCaptured().
@@ -28,8 +34,11 @@ class ScopedVideoFrameDone {
 
 }  // namespace
 
-CefVideoConsumerOSR::CefVideoConsumerOSR(CefRenderWidgetHostViewOSR* view)
-    : view_(view), video_capturer_(view->CreateVideoCapturer()) {
+CefVideoConsumerOSR::CefVideoConsumerOSR(CefRenderWidgetHostViewOSR* view,
+                                         bool use_shared_texture)
+    : use_shared_texture_(use_shared_texture),
+      view_(view),
+      video_capturer_(view->CreateVideoCapturer()) {
   video_capturer_->SetFormat(media::PIXEL_FORMAT_ARGB);
 
   // Always use the highest resolution within constraints that doesn't exceed
@@ -45,7 +54,10 @@ CefVideoConsumerOSR::~CefVideoConsumerOSR() = default;
 
 void CefVideoConsumerOSR::SetActive(bool active) {
   if (active) {
-    video_capturer_->Start(this, viz::mojom::BufferFormatPreference::kDefault);
+    video_capturer_->Start(
+        this, use_shared_texture_
+                  ? viz::mojom::BufferFormatPreference::kPreferGpuMemoryBuffer
+                  : viz::mojom::BufferFormatPreference::kDefault);
   } else {
     video_capturer_->Stop();
   }
@@ -88,6 +100,24 @@ void CefVideoConsumerOSR::OnFrameCaptured(
         callbacks) {
   ScopedVideoFrameDone scoped_done(std::move(callbacks));
 
+  // If it is GPU Texture OSR.
+  if (use_shared_texture_) {
+    DCHECK(data->is_gpu_memory_buffer_handle() &&
+           info->pixel_format == media::PIXEL_FORMAT_ARGB);
+#if BUILDFLAG(IS_WIN)
+    auto& gmb_handle = data->get_gpu_memory_buffer_handle();
+    view_->OnAcceleratedPaint(content_rect, info->coded_size,
+                              gmb_handle.dxgi_handle.Get());
+#elif BUILDFLAG(IS_APPLE)
+    // Not sure if this will compile at all :(
+    // Seeking chances to a macOS computer...
+    auto& gmb_handle = data->get_gpu_memory_buffer_handle();
+    view_->OnAcceleratedPaint(content_rect, info->coded_size,
+                              gmb_handle.io_surface.get());
+#endif
+    return;
+  }
+
   if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {
     DLOG(ERROR) << "Unsupported pixel format " << info->pixel_format;
     return;
diff --git a/libcef/browser/osr/video_consumer_osr.h b/libcef/browser/osr/video_consumer_osr.h
index 48ff52715..5690717d4 100644
--- a/libcef/browser/osr/video_consumer_osr.h
+++ b/libcef/browser/osr/video_consumer_osr.h
@@ -10,7 +10,8 @@ class CefRenderWidgetHostViewOSR;
 
 class CefVideoConsumerOSR : public viz::mojom::FrameSinkVideoConsumer {
  public:
-  explicit CefVideoConsumerOSR(CefRenderWidgetHostViewOSR* view);
+  explicit CefVideoConsumerOSR(CefRenderWidgetHostViewOSR* view,
+                               bool use_shared_texture);
 
   CefVideoConsumerOSR(const CefVideoConsumerOSR&) = delete;
   CefVideoConsumerOSR& operator=(const CefVideoConsumerOSR&) = delete;
@@ -36,6 +37,8 @@ class CefVideoConsumerOSR : public viz::mojom::FrameSinkVideoConsumer {
   void OnNewSubCaptureTargetVersion(
       uint32_t sub_capture_target_version) override {}
 
+  const bool use_shared_texture_ = false;
+
   CefRenderWidgetHostViewOSR* const view_;
   std::unique_ptr<viz::ClientFrameSinkVideoCapturer> video_capturer_;
 
diff --git a/tests/cefclient/browser/browser_window_osr_mac.mm b/tests/cefclient/browser/browser_window_osr_mac.mm
index 884b18d1d..df6d42530 100644
--- a/tests/cefclient/browser/browser_window_osr_mac.mm
+++ b/tests/cefclient/browser/browser_window_osr_mac.mm
@@ -1452,6 +1452,11 @@ void OnImeCompositionRangeChanged(
   CefWindowInfo window_info;
   window_info.SetAsWindowless(
       CAST_NSVIEW_TO_CEF_WINDOW_HANDLE(native_browser_view_));
+      
+  window_info.shared_texture_enabled =
+        renderer_.settings().shared_texture_enabled;
+  window_info.external_begin_frame_enabled =
+        renderer_.settings().external_begin_frame_enabled;
 
   // Create the browser asynchronously.
   CefBrowserHost::CreateBrowser(window_info, browser_window_.client_handler_,
@@ -1466,6 +1471,11 @@ void OnImeCompositionRangeChanged(
   CEF_REQUIRE_UI_THREAD();
 
   windowInfo.SetAsWindowless(temp_handle);
+  windowInfo.shared_texture_enabled =
+      renderer_.settings().shared_texture_enabled;
+  windowInfo.external_begin_frame_enabled =
+      renderer_.settings().external_begin_frame_enabled;
+
   client = browser_window_.client_handler_;
 }
 
diff --git a/tests/cefclient/browser/main_context_impl.cc b/tests/cefclient/browser/main_context_impl.cc
index 24365bdcf..de97df285 100644
--- a/tests/cefclient/browser/main_context_impl.cc
+++ b/tests/cefclient/browser/main_context_impl.cc
@@ -64,11 +64,15 @@ MainContextImpl::MainContextImpl(CefRefPtr<CefCommandLine> command_line,
       use_windowless_rendering_ &&
       command_line_->HasSwitch(switches::kTransparentPaintingEnabled);
 
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_MAC)
   // Shared texture is only supported on Windows.
   shared_texture_enabled_ =
       use_windowless_rendering_ &&
       command_line_->HasSwitch(switches::kSharedTextureEnabled);
+#else
+  // Disable for linux for now because we don't know how to deal with
+  // NativePixmap GMB.
+  shared_texture_enabled_ = false;
 #endif
 
   external_begin_frame_enabled_ =
@@ -77,7 +81,7 @@ MainContextImpl::MainContextImpl(CefRefPtr<CefCommandLine> command_line,
 
   if (windowless_frame_rate_ <= 0) {
 // Choose a reasonable default rate based on the OSR mode.
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_MAC)
     windowless_frame_rate_ = shared_texture_enabled_ ? 60 : 30;
 #else
     windowless_frame_rate_ = 30;
@@ -259,9 +263,7 @@ void MainContextImpl::PopulateOsrSettings(OsrRendererSettings* settings) {
   settings->show_update_rect =
       command_line_->HasSwitch(switches::kShowUpdateRect);
 
-#if defined(OS_WIN)
   settings->shared_texture_enabled = shared_texture_enabled_;
-#endif
   settings->external_begin_frame_enabled = external_begin_frame_enabled_;
   settings->begin_frame_rate = windowless_frame_rate_;
 
diff --git a/tests/cefclient/browser/main_context_impl.h b/tests/cefclient/browser/main_context_impl.h
index 6613cf6d9..15fdd76d5 100644
--- a/tests/cefclient/browser/main_context_impl.h
+++ b/tests/cefclient/browser/main_context_impl.h
@@ -80,9 +80,7 @@ class MainContextImpl : public MainContext {
 
   std::unique_ptr<RootWindowManager> root_window_manager_;
 
-#if defined(OS_WIN)
   bool shared_texture_enabled_;
-#endif
 
   bool external_begin_frame_enabled_;
 
diff --git a/tests/cefclient/browser/osr_d3d11_win.cc b/tests/cefclient/browser/osr_d3d11_win.cc
index 0318c2fb1..7b3e095d3 100644
--- a/tests/cefclient/browser/osr_d3d11_win.cc
+++ b/tests/cefclient/browser/osr_d3d11_win.cc
@@ -23,6 +23,7 @@
 #endif
 #include <d3dcompiler.h>
 #include <directxmath.h>
+#include <wrl/client.h>
 
 #include "include/base/cef_logging.h"
 #include "include/internal/cef_string.h"
@@ -568,10 +569,18 @@ std::shared_ptr<Geometry> Device::create_quad(float x,
 }
 
 std::shared_ptr<Texture2D> Device::open_shared_texture(void* handle) {
+  Microsoft::WRL::ComPtr<ID3D11Device1> device1;
+  HRESULT hr = device_->QueryInterface(IID_PPV_ARGS(&device1));
+  if (FAILED(hr)) {
+    DLOG(ERROR) << "Failed to open D3D11_1 device. hr=" << std::hex << hr;
+    return nullptr;
+  }
+
+  // Open texture on device using shared handle
   ID3D11Texture2D* tex = nullptr;
-  auto hr = device_->OpenSharedResource(handle, __uuidof(ID3D11Texture2D),
-                                        (void**)(&tex));
+  hr = device1->OpenSharedResource1(handle, IID_PPV_ARGS(&tex));
   if (FAILED(hr)) {
+    DLOG(ERROR) << "Failed to open shared texture. hr=" << std::hex << hr;
     return nullptr;
   }
 
@@ -825,6 +834,8 @@ void Layer::render_texture(const std::shared_ptr<Context>& ctx,
       effect_ = device_->create_default_effect();
     }
 
+    texture->lock_key(0, INFINITE);
+
     // Bind our states/resource to the pipeline.
     ScopedBinder<Geometry> quad_binder(ctx, geometry_);
     ScopedBinder<Effect> fx_binder(ctx, effect_);
@@ -832,6 +843,8 @@ void Layer::render_texture(const std::shared_ptr<Context>& ctx,
 
     // Draw the quad.
     geometry_->draw();
+
+    texture->unlock_key(0);
   }
 }
 
diff --git a/tests/cefclient/browser/osr_render_handler_win_d3d11.cc b/tests/cefclient/browser/osr_render_handler_win_d3d11.cc
index e85f4a699..fa9093aae 100644
--- a/tests/cefclient/browser/osr_render_handler_win_d3d11.cc
+++ b/tests/cefclient/browser/osr_render_handler_win_d3d11.cc
@@ -12,7 +12,7 @@
 namespace client {
 
 BrowserLayer::BrowserLayer(const std::shared_ptr<d3d11::Device>& device)
-    : d3d11::Layer(device, true /* flip */) {
+    : d3d11::Layer(device, false /* flip */) {
   frame_buffer_ = std::make_shared<d3d11::FrameBuffer>(device_);
 }
 
diff --git a/tests/cefclient/browser/osr_renderer.h b/tests/cefclient/browser/osr_renderer.h
index 9754deabd..b49d53868 100644
--- a/tests/cefclient/browser/osr_renderer.h
+++ b/tests/cefclient/browser/osr_renderer.h
@@ -61,6 +61,8 @@ class OsrRenderer {
 
   void ClearPopupRects();
 
+  const OsrRendererSettings& settings() const { return settings_; }
+
  private:
   CefRect GetPopupRectInWebView(const CefRect& original_rect);
 
